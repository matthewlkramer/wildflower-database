
C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\INDEX.HTML CODE IS BELOW
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>


C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\PACKAGE.JSON CODE IS BELOW
{
  "name": "wildflower-database",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "lucide-react": "^0.523.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.29.0",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react": "^4.6.0",
    "eslint": "^9.29.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.2.0",
    "vite": "^7.0.0"
  }
}


C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\README.MD CODE IS BELOW
Wildflower is a network of tiny, teacher-led Montessori schools. Schools are generally 1 or 2 classrooms and are led by 1-3 educators (called teacher leaders or TLs) serving 20-50 children. Classrooms generally serve 0-3 year olds, 3-6 year olds, 6-12 year olds (sometimes broken up 6-9 and 9-12), 7th-8th graders, and high school age children. A two classroom school can serve two adjacent age bands. Schools can be organized as any of several governance/funding models: non-profit preschools, non-profit K-12 schools, or charter K-12 schools. For the first types of schools, they charge tuition to families who can pay and lower income families are subsidized through public childcare subsidies, universal pre-K programs, Educational Savings Accounts, tax credit scholarship programs, or other similar programs.Charter schools are free to all children and families.

Educators typically come to Wildflower with a dream for the type of school they hope to open and they go through a process called the School Startup Journey on the path to opening.  

This app is to support people who work with these teacher leaders - operations guides, cohort leaders, regional entrepreneurs - to know what the schools and TLs they work with are up to.


Tech stack:
React + Vite
Vercel
Airtable backend


C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\ADDEDUCATORSTINTMODAL.JSX CODE IS BELOW
import React, { useState, useMemo } from 'react';
import { X, Search } from 'lucide-react';
import { EDUCATOR_ROLES } from './utils/constants.js';

const AddEducatorStintModal = ({ isOpen, onClose, onSubmit, schoolId, allEducators }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedEducator, setSelectedEducator] = useState(null);
  const [startDate, setStartDate] = useState(new Date().toISOString().split('T')[0]);
  const [currentlyActive, setCurrentlyActive] = useState(true);
  const [selectedRoles, setSelectedRoles] = useState([]);

    const roleOptions = EDUCATOR_ROLES;

  const filteredEducators = useMemo(() => {
    return allEducators.filter(educator =>
      `${educator.firstName} ${educator.lastName}`.toLowerCase().includes(searchTerm.toLowerCase()) ||
      educator.email.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [allEducators, searchTerm]);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!selectedEducator || selectedRoles.length === 0) return;

    const newStint = {
      educatorId: selectedEducator.id,
      schoolId: schoolId,
      startDate: startDate,
      endDate: null,
      currentlyActive: currentlyActive,
      roles: selectedRoles,
      educatorName: `${selectedEducator.firstName} ${selectedEducator.lastName}`
    };

    onSubmit(newStint);
    handleClose();
  };

  const handleClose = () => {
    setSearchTerm('');
    setSelectedEducator(null);
    setStartDate(new Date().toISOString().split('T')[0]);
    setCurrentlyActive(true);
    setSelectedRoles([]);
    onClose();
  };

  const toggleRole = (role) => {
    setSelectedRoles(prev =>
      prev.includes(role)
        ? prev.filter(r => r !== role)
        : [...prev, role]
    );
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-md max-h-[80vh] overflow-y-auto">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold">Add Educator Stint</h3>
          <button onClick={handleClose} className="text-gray-400 hover:text-gray-600">
            <X className="w-5 h-5" />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="space-y-4">
          {/* Educator Search */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Select Educator
            </label>
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="text"
                placeholder="Search educators..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            
            {searchTerm && (
              <div className="mt-2 max-h-32 overflow-y-auto border border-gray-200 rounded-lg">
                {filteredEducators.map(educator => (
                  <button
                    key={educator.id}
                    type="button"
                    onClick={() => {
                      setSelectedEducator(educator);
                      setSearchTerm(`${educator.firstName} ${educator.lastName}`);
                    }}
                    className={`w-full text-left px-3 py-2 hover:bg-gray-50 ${
                      selectedEducator?.id === educator.id ? 'bg-blue-50' : ''
                    }`}
                  >
                    <div className="font-medium">{educator.firstName} {educator.lastName}</div>
                    <div className="text-sm text-gray-500">{educator.email}</div>
                  </button>
                ))}
                {filteredEducators.length === 0 && (
                  <div className="px-3 py-2 text-gray-500">No educators found</div>
                )}
              </div>
            )}
          </div>

          {/* Start Date */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Start Date
            </label>
            <input
              type="date"
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>

          {/* Currently Active */}
          <div>
            <label className="flex items-center">
              <input
                type="checkbox"
                checked={currentlyActive}
                onChange={(e) => setCurrentlyActive(e.target.checked)}
                className="mr-2 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <span className="text-sm font-medium text-gray-700">Currently Active</span>
            </label>
          </div>

          {/* Roles */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Roles (select at least one)
            </label>
            <div className="space-y-2">
              {roleOptions.map(role => (
                <label key={role} className="flex items-center">
                  <input
                    type="checkbox"
                    checked={selectedRoles.includes(role)}
                    onChange={() => toggleRole(role)}
                    className="mr-2 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span className="text-sm">{role}</span>
                </label>
              ))}
            </div>
          </div>

          <div className="flex space-x-3 pt-4">
            <button
              type="button"
              onClick={handleClose}
              className="flex-1 px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={!selectedEducator || selectedRoles.length === 0}
              className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed"
            >
              Add Stint
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddEducatorStintModal;

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\AIRTABLECONFIG.JS CODE IS BELOW
export const AIRTABLE_CONFIG = {
    BASE_ID: import.meta.env.VITE_AIRTABLE_BASE_ID || 'appJBT9a4f3b7hWQ2',
    API_KEY: import.meta.env.VITE_AIRTABLE_API_KEY || 'patPJ0FQbeJOXZV6q.47a003922253003392f41b305cb163caba0c18ec6be85ee4bb1219d89c453048',
    BASE_URL: 'https://api.airtable.com/v0'
};

// Table names mapping from your Airtable (these must match exactly)
export const TABLES = {
    SCHOOLS: 'Schools',
    EDUCATORS: 'Educators',
    CHARTERS: 'Charters',
    EDUCATORS_X_SCHOOLS: 'Educators x Schools',
    LOCATIONS: 'Locations',
    SCHOOL_NOTES: 'School notes',
    EDUCATOR_NOTES: 'Educator notes',
    GRANTS: 'Grants',
    LOANS: 'Loans',
    ACTION_STEPS: 'Action steps',
    MEMBERSHIP_FEE_OVERVIEW: 'Membership fee overview',
    MEMBERSHIP_FEE_UPDATES: 'Membership fee change log',
    SSJ_FILLOUT_FORMS: 'SSJ Fillout Forms',
    EVENT_ATTENDANCE: 'Event attendance',
    MONTESSORI_CERTS: 'Montessori Certs',
    GUIDES_ASSIGNMENTS: 'Guides Assignments',
    GOVERNANCE_DOCS: 'Governance docs',
    EMAIL_ADDRESSES: 'Email Addresses',
    NINE_NINETIES: '990s',
    FAMILY_SURVEYS: 'Family Survey',
    ASSESSMENT_DATA: 'Assessment data'
};

// API Rate limiting configuration
export const API_CONFIG = {
    MAX_REQUESTS_PER_SECOND: 5,
    REQUEST_DELAY: 200, // milliseconds
    RETRY_ATTEMPTS: 3,
    RETRY_DELAY: 1000 // milliseconds
};

// Environment-specific settings
export const ENV_CONFIG = {
    isDevelopment: import.meta.env.DEV,
    isProduction: import.meta.env.PROD,
    enableDebugLogs: import.meta.env.VITE_DEBUG_LOGS === 'true'
};

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\AIRTABLESERVICE.JSX CODE IS BELOW
import { AIRTABLE_CONFIG, TABLES } from './airtableConfig.js';

class AirtableService {
    constructor() {
        this.baseUrl = `${AIRTABLE_CONFIG.BASE_URL}/${AIRTABLE_CONFIG.BASE_ID}`;
        this.headers = {
            'Authorization': `Bearer ${AIRTABLE_CONFIG.API_KEY}`,
            'Content-Type': 'application/json'
        };
    }

    // Generic method to fetch records from any table
    async fetchRecords(tableName, options = {}) {
        try {
            const {
                view,
                maxRecords = 10000,
                pageSize = 100,
                sort,
                filterByFormula,
                fields
            } = options;

                   // Debug logging for locations table specifically
        if (tableName === TABLES.LOCATIONS) {
            console.log('🔍 fetchRecords for LOCATIONS table:', {
                tableName,
                filterByFormula,
                sort,
                maxRecords,
                pageSize
            });
        }

            let allRecords = [];
            let offset = null;
            let pageCount = 0;

            console.log(`🔄 Starting to fetch records from ${tableName}...`);

            do {
                const params = new URLSearchParams();
                if (view) params.append('view', view);
                if (pageSize) params.append('pageSize', pageSize);
                if (sort) params.append('sort[0][field]', sort.field);
                if (sort) params.append('sort[0][direction]', sort.direction || 'asc');
                if (filterByFormula) params.append('filterByFormula', filterByFormula);
                if (fields) fields.forEach(field => params.append('fields[]', field));
                if (offset) params.append('offset', offset);

                const url = `${this.baseUrl}/${encodeURIComponent(tableName)}?${params}`;
               // Debug the URL for locations specifically
            if (tableName === TABLES.LOCATIONS) {
                console.log('🔗 Locations API URL:', url);
            }
                console.log(`📄 Fetching page ${pageCount + 1} from ${tableName}...`);

                console.log('🔗 Making Airtable request:', {
                    tableName: tableName,
                    pageCount: pageCount + 1,
                    hasApiKey: !!this.headers.Authorization,
                    baseId: AIRTABLE_CONFIG.BASE_ID,
                    urlLength: url.length
                });

                const response = await fetch(url, { headers: this.headers });

                console.log('📡 Airtable response:', {
                    status: response.status,
                    statusText: response.statusText,
                    ok: response.ok,
                    tableName: tableName,
                    pageCount: pageCount + 1
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('❌ Airtable API Error:', {
                        status: response.status,
                        statusText: response.statusText,
                        error: errorText,
                        tableName: tableName,
                        url: url.substring(0, 100) + '...'
                    });
                    throw new Error(`Airtable API error: ${response.status} - ${errorText}`);
                }

                const data = await response.json();
                const recordsInThisPage = data.records || [];

                allRecords = allRecords.concat(recordsInThisPage);
                offset = data.offset;
                pageCount++;

                console.log(`📄 Page ${pageCount}: Fetched ${recordsInThisPage.length} records, total so far: ${allRecords.length}`);

                // Stop if no more pages or we've reached maxRecords
                if (!offset || allRecords.length >= maxRecords) {
                    if (!offset) {
                        console.log('✅ No more pages available');
                    }
                    if (allRecords.length >= maxRecords) {
                        console.log(`✅ Reached maxRecords limit: ${maxRecords}`);
                    }
                    break;
                }

                // Safety check to prevent infinite loops
                if (pageCount > 100) {
                    console.warn('⚠️ Stopping after 100 pages to prevent infinite loop');
                    break;
                }

            } while (offset);

            // Trim to maxRecords if we got too many
            if (allRecords.length > maxRecords) {
                console.log(`✂️ Trimming results from ${allRecords.length} to ${maxRecords}`);
                allRecords = allRecords.slice(0, maxRecords);
            }

            console.log(`✅ Final result for ${tableName}: ${allRecords.length} records from ${pageCount} pages`);
            return this.transformRecords(allRecords);
        } catch (error) {
            console.error(`❌ Error fetching records from ${tableName}:`, error);
            throw error;
        }
    }

    // Transform Airtable records to a more usable format
    transformRecords(records) {
        return records.map(record => ({
            id: record.id,
            ...record.fields,
            createdTime: record.createdTime
        }));
    }

    // Create a new record
    async createRecord(tableName, fields) {
        try {
            const url = `${this.baseUrl}/${encodeURIComponent(tableName)}`;
            const response = await fetch(url, {
                method: 'POST',
                headers: this.headers,
                body: JSON.stringify({ fields })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            return this.transformRecords([data])[0];
        } catch (error) {
            console.error(`Error creating record in ${tableName}:`, error);
            throw error;
        }
    }

    // Update a record
    async updateRecord(tableName, recordId, fields) {
        try {
            const url = `${this.baseUrl}/${encodeURIComponent(tableName)}/${recordId}`;
            const response = await fetch(url, {
                method: 'PATCH',
                headers: this.headers,
                body: JSON.stringify({ fields })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            return this.transformRecords([data])[0];
        } catch (error) {
            console.error(`Error updating record ${recordId} in ${tableName}:`, error);
            throw error;
        }
    }

    // Delete a record
    async deleteRecord(tableName, recordId) {
        try {
            const url = `${this.baseUrl}/${encodeURIComponent(tableName)}/${recordId}`;
            const response = await fetch(url, {
                method: 'DELETE',
                headers: this.headers
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            return true;
        } catch (error) {
            console.error(`Error deleting record ${recordId} from ${tableName}:`, error);
            throw error;
        }
    }

    // Fetch schools
    async fetchSchools(includeInactive = false) {
        const options = {
            sort: { field: 'Name', direction: 'asc' },
        };

        // Add filter for active schools only (default behavior)
        if (!includeInactive) {
            options.filterByFormula = "OR({School Status} = 'Open', {School Status} = 'Emerging')";
        }

        console.log('🔄 Fetching schools with options:', options);
        return this.fetchRecords(TABLES.SCHOOLS, options);
    }

    // Fetch educators
    async fetchEducators(includeInactive = false) {
        console.log('🚨 DEBUG: fetchEducators called with includeInactive:', includeInactive);

        const options = {
            sort: { field: 'Last Name', direction: 'asc' },
        };

        console.log('🚨 DEBUG: Calling fetchRecords with options:', options);
        console.log('🚨 DEBUG: Should get ALL 3002 educators from Airtable');

        const result = await this.fetchRecords(TABLES.EDUCATORS, options);

        console.log('🚨 DEBUG: fetchEducators result length:', result.length);

        return result;
    }

    // Fetch charters
    async fetchCharters() {
        return this.fetchRecords(TABLES.CHARTERS, {
            sort: { field: 'Initial target community', direction: 'asc' }
        });
    }

    // Fetch relationships between educators and schools
    async fetchEducatorsXSchools() {
        return this.fetchRecords(TABLES.EDUCATORS_X_SCHOOLS, {
            sort: { field: 'Start Date', direction: 'desc' }
        });
    }

    // Add a generic method to fetch all records from any table (for your hooks)
    async getAllRecords(tableName, options = {}) {
        console.log(`🔄 Getting ALL records from ${tableName}...`);
        return this.fetchRecords(tableName, {
            maxRecords: 10000, // Allow up to 10,000 records
            ...options
        });
    }

// Generic method for fetching records by school_id
async fetchBySchoolId(tableName, schoolId, sortField = null, sortDirection = 'desc') {

    const options = {
        filterByFormula: `{school_id} = "${schoolId}"`,
    };
    
    if (sortField) {
        options.sort = { field: sortField, direction: sortDirection };
    }

    const result = await this.fetchRecords(tableName, options);
    return result;
}

// Updated specific methods - all using school_id field

// Locations
async fetchSchoolLocations(schoolId) {
    return this.fetchBySchoolId(TABLES.LOCATIONS, schoolId, 'Start of time at location', 'desc');
}

// School Notes
async fetchSchoolNotes(schoolId) {
    return this.fetchBySchoolId(TABLES.SCHOOL_NOTES, schoolId, 'Date created', 'desc');
}

// Action Steps
async fetchSchoolActionSteps(schoolId) {
    return this.fetchBySchoolId(TABLES.ACTION_STEPS, schoolId, 'Due date', 'asc');
}

// Governance Documents
async fetchSchoolGovernanceDocs(schoolId) {
    return this.fetchBySchoolId(TABLES.GOVERNANCE_DOCS, schoolId, 'Date', 'desc');
}

// Guide Assignments
async fetchSchoolGuideAssignments(schoolId) {
    return this.fetchBySchoolId(TABLES.GUIDES_ASSIGNMENTS, schoolId, 'Start date', 'desc');
}

// Grants
async fetchSchoolGrants(schoolId) {
    return this.fetchBySchoolId(TABLES.GRANTS, schoolId, 'Issue Date', 'desc');
}

// Loans
async fetchSchoolLoans(schoolId) {
    return this.fetchBySchoolId(TABLES.LOANS, schoolId, 'Effective Issue Date', 'desc');
}
// Family Surveys
async fetchFamilySurveys(schoolId) {
    return this.fetchBySchoolId(TABLES.FAMILY_SURVEYS, schoolId, 'School year', 'desc');
}

// Membership Fee Overview
async fetchSchoolMembershipFees(schoolId) {
    return this.fetchBySchoolId(TABLES.MEMBERSHIP_FEE_OVERVIEW, schoolId, 'School year', 'desc');
}

    // Fetch SSJ forms for a specific educator
    async fetchEducatorSSJForms(educatorId) {
        return this.fetchRecords(TABLES.SSJ_FILLOUT_FORMS, {
            filterByFormula: `FIND("${educatorId}", {Educator})`,
            sort: { field: 'Entry Date', direction: 'desc' }
        });
    }

    // Fetch event attendance for a specific educator
    async fetchEducatorEventAttendance(educatorId) {
        return this.fetchRecords(TABLES.EVENT_ATTENDANCE, {
            filterByFormula: `FIND("${educatorId}", {Event Participant})`,
            sort: { field: 'Registration Date', direction: 'desc' }
        });
    }

    // Fetch Montessori certifications for a specific educator
    async fetchEducatorMontessoriCerts(educatorId) {
        return this.fetchRecords(TABLES.MONTESSORI_CERTS, {
            filterByFormula: `FIND("${educatorId}", {Educator})`,
            sort: { field: 'Year Certified', direction: 'desc' }
        });
    }
}

export const airtableService = new AirtableService();

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\APP.CSS CODE IS BELOW
@import 'https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css';

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\APP.JSX CODE IS BELOW
// src/App.jsx
import React from 'react';
import WildflowerDatabase from './components/WildflowerDatabase.jsx';
import './App.css';

function App() {
  return (
    <div className="App">
      <WildflowerDatabase />
    </div>
  );
}

export default App;

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\ASSETS\REACT.SVG CODE IS BELOW
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\COMPONENTS\CHARTERS\CHARTERDETAILS.JSX CODE IS BELOW
import React from 'react';
import { ArrowLeft } from 'lucide-react';

const CharterDetails = ({ charter, onBack }) => {
    return (
        <div className="h-full flex flex-col bg-white">
            <div className="border-b bg-gray-50 px-6 py-4">
                <div className="flex items-center mb-4">
                    <button
                        onClick={onBack}
                        className="mr-4 p-2 hover:bg-gray-200 rounded-lg transition-colors"
                    >
                        <ArrowLeft className="w-5 h-5" />
                    </button>
                    <h1 className="text-2xl font-bold text-gray-900">{charter.name}</h1>
                </div>
            </div>
            <div className="flex-1 overflow-y-auto p-6">
                <p>Charter details coming soon...</p>
            </div>
        </div>
    );
};

export default CharterDetails;

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\COMPONENTS\EDUCATORS\EDUCATORDETAILS.JSX CODE IS BELOW
import React from 'react';
import { ArrowLeft } from 'lucide-react';

const EducatorDetails = ({ educator, onBack }) => {
    return (
        <div className="h-full flex flex-col bg-white">
            <div className="border-b bg-gray-50 px-6 py-4">
                <div className="flex items-center mb-4">
                    <button
                        onClick={onBack}
                        className="mr-4 p-2 hover:bg-gray-200 rounded-lg transition-colors"
                    >
                        <ArrowLeft className="w-5 h-5" />
                    </button>
                    <h1 className="text-2xl font-bold text-gray-900">
                        {educator.firstName} {educator.lastName}
                    </h1>
                </div>
            </div>
            <div className="flex-1 overflow-y-auto p-6">
                <p>Educator details coming soon...</p>
            </div>
        </div>
    );
};

export default EducatorDetails;

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\COMPONENTS\EDUCATORS\EDUCATORSUMMARY.JSX CODE IS BELOW
import React, { useState } from 'react';
import DetailRow from '../shared/DetailRow';
import StatusBadge from '../shared/StatusBadge';

const EducatorSummary = ({ educator }) => {
    const [isEditing, setIsEditing] = useState(false);

    return (
        <div className="space-y-8">
            {/* Edit Button */}
            <div className="flex justify-end">
                <button
                    onClick={() => setIsEditing(!isEditing)}
                    className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center text-sm"
                >
                    {isEditing ? 'Save' : 'Edit'}
                </button>
            </div>

            <div className="flex items-start space-x-4">
                <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center">
                    <span className="text-xl font-medium text-gray-600">
                        {educator.fullName ? educator.fullName[0] : ''}
                    </span>
                </div>
                <div className="flex-1">
                    <h2 className="text-xl font-bold text-gray-900">{educator.fullName}</h2>
                    <div className="mt-1 space-y-1">
                        <div className="text-blue-600">{educator.email || 'No email address'}</div>
                        <div className="text-gray-600">{educator.role || 'No current role'}</div>
                        <div className="text-gray-600">{educator.pronouns}</div>
                    </div>
                </div>
            </div>

            <div className="grid grid-cols-2 gap-x-8 gap-y-4 border-t pt-6">
                <DetailRow label="Full Name" value={educator.fullName} />
                <DetailRow label="First Name" value={educator.firstName} />
                <DetailRow label="Last Name" value={educator.lastName} />
                <DetailRow label="Email" value={educator.email} type="email" />
                <DetailRow label="Current School" value={educator.currentSchool} />
                <DetailRow label="Role" value={educator.role} />
                <DetailRow label="Discovery Status" value={<StatusBadge status={educator.discoveryStatus} />} />
                <DetailRow label="Individual Type" value={educator.individualType} />
                <DetailRow label="Montessori Certified" value={educator.montessoriCertified} type="boolean" />
                <DetailRow label="Pronouns" value={educator.pronouns} />
                <DetailRow label="Phone" value={educator.phone} type="phone" />
                <DetailRow label="Target Location" value={educator.targetGeo} />
                <DetailRow label="Tags" value={educator.tags?.join(', ')} />
            </div>
        </div>
    );
};

export default EducatorSummary;


C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\COMPONENTS\SCHOOLS\SCHOOLDETAILS.JSX CODE IS BELOW
// src/components/schools/SchoolDetails.jsx
import React, { useState } from 'react';
import { ArrowLeft, CheckCircle, XCircle, Plus, ExternalLink, FileText } from 'lucide-react';
import StatusBadge from '../shared/StatusBadge';
import DetailRow, { EditableDetailRow } from '../shared/DetailRow';
import LocationEditModal from '../LocationEditModal';

// Import the hooks and data you need
import { 
  useEducatorsXSchools,
  useSchoolLocations,
  useSchoolNotes,
  useActionSteps,
  useGovernanceDocs,
  useGuideAssignments,
  useGrants,
  useLoans,
  useMembershipFeeRecords,
  useMembershipFeeUpdates
} from '../../hooks/useUnifiedData';

import useUnifiedData from '../../hooks/useUnifiedData';
import { useCachedMutations } from '../../hooks/useCachedData';
import { TABS } from '../../utils/constants';

const SchoolDetails = ({ school, onBack, onEducatorOpen }) => {
  const [activeTab, setActiveTab] = useState('summary');
  const [selectedSchoolYear, setSelectedSchoolYear] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [editedSchool, setEditedSchool] = useState(school);
  
  // Location modal states
  const [showLocationModal, setShowLocationModal] = useState(false);
  const [selectedLocation, setSelectedLocation] = useState(null);
  const [isCreatingLocation, setIsCreatingLocation] = useState(false);

  // Debug logging
  console.log('🏫 SchoolDetails received school:', school);
  
  // Safety check - if no school data, show error
  if (!school) {
    return (
      <div className="h-full flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-xl font-semibold text-gray-900 mb-2">No School Data</h2>
          <p className="text-gray-600 mb-4">School data was not provided to this component.</p>
          <button 
            onClick={onBack}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"
          >
            Go Back
          </button>
        </div>
      </div>
    );
  }

  // Get all educators for the stint functionality
  const { data: allEducators } = useUnifiedData(TABS.EDUCATORS, { includeInactive: true });
  
  // Get educators x schools relationships
  const { data: educatorsXSchools } = useEducatorsXSchools();
  
  // Get cached mutations for data operations
  const { createRecord, updateRecord, deleteRecord, loading: mutationLoading } = useCachedMutations();

  const tabs = [
    { id: 'summary', label: 'Summary' },
    { id: 'tls', label: 'TLs' },
    { id: 'locations', label: 'Locations' },
    { id: 'governance', label: 'Governance' },
    { id: 'guides', label: 'Guides' },
    { id: 'ssj-oss', label: 'SSJ / OSS' },
    { id: 'membership-fees', label: 'Membership fees' },
    { id: 'grants-loans', label: 'Grants and Loans' },
    { id: 'linked-mtgs', label: 'Linked mtgs/emails' },
    { id: 'notes-actions', label: 'Notes/Action steps' }
  ];

  // Helper functions for data - using hooks instead of sample data
  const getSchoolEducators = () => {
    return educatorsXSchools?.filter(exs => exs.schoolId === school.id) || [];
  };

  // Get data using hooks
  const { data: schoolLocations, refetch: refetchLocations } = useSchoolLocations(school.id);
  const { data: schoolNotes } = useSchoolNotes(school.id);
  const { data: actionSteps } = useActionSteps(school.id);
  const { data: governanceDocs } = useGovernanceDocs(school.id);
  const { data: guideAssignments } = useGuideAssignments(school.id);
  const { data: grants } = useGrants(school.id);
  const { data: loans } = useLoans(school.id);
  const { data: membershipFeeRecords } = useMembershipFeeRecords(school.id);

  // Edit functionality
  const handleEditSave = () => {
    console.log('Saving school data:', editedSchool);
    setIsEditing(false);
  };

  const handleEditCancel = () => {
    setEditedSchool(school);
    setIsEditing(false);
  };

  const handleInputChange = (field, value) => {
    setEditedSchool(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // Tab content rendering
  const renderTabContent = () => {
    switch (activeTab) {
      case 'summary':
        return renderSummaryTab();
      case 'tls':
        return renderTLsTab();
      case 'locations':
        return renderLocationsTab();
      case 'governance':
        return renderGovernanceTab();
      case 'guides':
        return renderGuidesTab();
      case 'ssj-oss':
        return renderSSJOSSTab();
      case 'membership-fees':
        return renderMembershipFeesTab();
      case 'grants-loans':
        return renderGrantsLoansTab();
      case 'notes-actions':
        return renderNotesActionsTab();
      case 'linked-mtgs':
        return (
          <div className="text-center py-8 text-gray-500">
            <h3 className="text-lg font-semibold mb-2">Linked Meetings/Emails</h3>
            <p>This section will be implemented later</p>
          </div>
        );
      default:
        return (
          <div className="text-center py-8 text-gray-500">
            {tabs.find(t => t.id === activeTab)?.label} content would go here
          </div>
        );
    }
  };

  const renderSummaryTab = () => (
    <div className="space-y-8">
      {/* Edit Button */}
      <div className="flex justify-end">
        {!isEditing ? (
          <button
            onClick={() => setIsEditing(true)}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center text-sm"
          >
            Edit
          </button>
        ) : (
          <div className="flex space-x-2">
            <button
              onClick={handleEditSave}
              className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 flex items-center text-sm"
            >
              Update
            </button>
            <button
              onClick={handleEditCancel}
              className="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 flex items-center text-sm"
            >
              Cancel
            </button>
          </div>
        )}
      </div>

      {/* Header Section */}
      <div className="grid grid-cols-4 gap-x-6 gap-y-2">
        {/* School Logo */}
        <div className="row-span-3 flex items-center justify-center">
          <div className="w-32 h-32 bg-gray-100 rounded-lg flex items-center justify-center">
            <FileText className="w-16 h-16 text-gray-400" />
          </div>
        </div>
        
        {/* Basic Info using enhanced DetailRow */}
        {isEditing ? (
          <>
            <EditableDetailRow 
              label="School Name" 
              field="name" 
              value={editedSchool.name}
              onChange={handleInputChange}
              required
            />
            <EditableDetailRow 
              label="Short Name" 
              field="shortName" 
              value={editedSchool.shortName}
              onChange={handleInputChange}
            />
            <EditableDetailRow 
              label="Ages Served" 
              field="agesServed" 
              value={editedSchool.agesServed}
              onChange={handleInputChange}
              type="array"
              placeholder="Primary, Lower Elementary, etc."
            />
            <EditableDetailRow 
              label="Governance Model" 
              field="governanceModel" 
              value={editedSchool.governanceModel}
              onChange={handleInputChange}
              type="select"
              options={['Independent', 'Charter', 'District']}
            />
            <EditableDetailRow 
              label="Founders" 
              field="founders" 
              value={editedSchool.founders}
              onChange={handleInputChange}
              type="array"
              placeholder="Founder names"
            />
            <EditableDetailRow 
              label="Current TLs" 
              field="currentTLs" 
              value={editedSchool.currentTLs}
              onChange={handleInputChange}
              type="array"
              placeholder="Teacher leader names"
            />
            <EditableDetailRow 
              label="School Open Date" 
              field="schoolOpenDate" 
              value={editedSchool.schoolOpenDate || editedSchool.opened}
              onChange={handleInputChange}
              type="date"
            />
            <EditableDetailRow 
              label="School Status" 
              field="status" 
              value={editedSchool.status}
              onChange={handleInputChange}
              type="select"
              options={['Emerging', 'Open', 'Permanently Closed', 'Disaffiliated', 'Disaffiliating']}
            />
            <EditableDetailRow 
              label="Membership Status" 
              field="membershipStatus" 
              value={editedSchool.membershipStatus}
              onChange={handleInputChange}
              type="select"
              options={['Member School', 'Pending', 'Former Member']}
            />
          </>
        ) : (
          <>
            <DetailRow label="School Name" value={editedSchool.name} />
            <DetailRow label="Short Name" value={editedSchool.shortName} />
            <DetailRow label="Ages Served" value={editedSchool.agesServed} />
            <DetailRow label="Governance Model" value={editedSchool.governanceModel} />
            <DetailRow label="Founders" value={editedSchool.founders} />
            <DetailRow label="Current TLs" value={editedSchool.currentTLs} />
            <DetailRow label="School Open Date" value={editedSchool.schoolOpenDate || editedSchool.opened} type="date" />
            <DetailRow label="School Status" value={<StatusBadge status={editedSchool.status} />} />
            <DetailRow label="Membership Status" value={<StatusBadge status={editedSchool.membershipStatus} />} />
          </>
        )}
      </div>

      {/* Additional School Information */}
      <div>
        <h3 className="text-lg font-semibold mb-4 text-gray-900">School Information</h3>
        <div className="grid grid-cols-4 gap-x-6 gap-y-2">
          {isEditing ? (
            <>
              <EditableDetailRow 
                label="Program Focus" 
                field="programFocus" 
                value={editedSchool.programFocus}
                onChange={handleInputChange}
                placeholder="Nature-based Montessori, etc."
              />
              <EditableDetailRow 
                label="Max Capacity" 
                field="maxCapacityEnrollments" 
                value={editedSchool.maxCapacityEnrollments}
                onChange={handleInputChange}
                type="number"
              />
              <EditableDetailRow 
                label="Number of Classrooms" 
                field="numberOfClassrooms" 
                value={editedSchool.numberOfClassrooms}
                onChange={handleInputChange}
                type="number"
              />
              <EditableDetailRow 
                label="Public Funding" 
                field="publicFunding" 
                value={editedSchool.publicFunding}
                onChange={handleInputChange}
                type="boolean"
              />
            </>
          ) : (
            <>
              <DetailRow label="Program Focus" value={editedSchool.programFocus} />
              <DetailRow label="Max Capacity" value={editedSchool.maxCapacityEnrollments} />
              <DetailRow label="Number of Classrooms" value={editedSchool.numberOfClassrooms} />
              <DetailRow label="Public Funding" value={editedSchool.publicFunding} />
            </>
          )}
        </div>
      </div>

      {/* Contact Information */}
      <div>
        <h3 className="text-lg font-semibold mb-4 text-gray-900">Contact Information</h3>
        <div className="grid grid-cols-4 gap-x-6 gap-y-2">
          {isEditing ? (
            <>
              <EditableDetailRow 
                label="School Email" 
                field="schoolEmail" 
                value={editedSchool.schoolEmail}
                onChange={handleInputChange}
                type="email"
              />
              <EditableDetailRow 
                label="School Phone" 
                field="phone" 
                value={editedSchool.phone}
                onChange={handleInputChange}
                type="phone"
              />
              <EditableDetailRow 
                label="Website" 
                field="website" 
                value={editedSchool.website}
                onChange={handleInputChange}
                type="url"
              />
              <EditableDetailRow 
                label="Email Domain" 
                field="emailDomain" 
                value={editedSchool.emailDomain}
                onChange={handleInputChange}
                placeholder="schoolname.org"
              />
            </>
          ) : (
            <>
              <DetailRow label="School Email" value={editedSchool.schoolEmail} type="email" />
              <DetailRow label="School Phone" value={editedSchool.phone} type="phone" />
              <DetailRow label="Website" value={editedSchool.website} type="url" />
              <DetailRow label="Email Domain" value={editedSchool.emailDomain} />
            </>
          )}
        </div>
      </div>

      {/* Legal Information */}
      <div>
        <h3 className="text-lg font-semibold mb-4 text-gray-900">Legal Entity</h3>
        <div className="grid grid-cols-4 gap-x-6 gap-y-2">
          {isEditing ? (
            <>
              <EditableDetailRow 
                label="EIN" 
                field="ein" 
                value={editedSchool.ein}
                onChange={handleInputChange}
                placeholder="99-1234567"
              />
              <EditableDetailRow 
                label="Legal Name" 
                field="legalName" 
                value={editedSchool.legalName}
                onChange={handleInputChange}
              />
              <EditableDetailRow 
                label="Incorporation Date" 
                field="incorporationDate" 
                value={editedSchool.incorporationDate}
                onChange={handleInputChange}
                type="date"
              />
              <EditableDetailRow 
                label="Nonprofit Status" 
                field="nonprofitStatus" 
                value={editedSchool.nonprofitStatus}
                onChange={handleInputChange}
                type="select"
                options={['501(c)(3)', 'group exemption', 'pending', 'for-profit']}
              />
            </>
          ) : (
            <>
              <DetailRow label="EIN" value={editedSchool.ein} />
              <DetailRow label="Legal Name" value={editedSchool.legalName} />
              <DetailRow label="Incorporation Date" value={editedSchool.incorporationDate} type="date" />
              <DetailRow label="Nonprofit Status" value={editedSchool.nonprofitStatus} />
            </>
          )}
        </div>
      </div>
    </div>
  );

  const renderTLsTab = () => {
    // Filter relationships for this school
    const schoolEducators = getSchoolEducators();
    
    console.log('🔍 TLs Tab Debug:', {
      schoolId: school.id,
      schoolName: school.name,
      totalRelationships: educatorsXSchools?.length || 0,
      schoolEducators: schoolEducators.length
    });

    const handleEndStint = async (stintId) => {
      // You'll need to implement this with your mutation hooks
      alert('End stint functionality - implement with useAirtableMutations');
    };

    const handleDeleteStint = async (stintId, educatorName) => {
      if (window.confirm(`Are you sure you want to delete the connection between ${educatorName} and this school?`)) {
        // You'll need to implement this with your mutation hooks
        alert('Delete stint functionality - implement with useAirtableMutations');
      }
    };
    
    return (
      <div>
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-lg font-semibold">Teacher Leaders & Staff</h3>
          <div className="flex space-x-2">
            <button className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center text-sm">
              <Plus className="w-4 h-4 mr-2" />
              Add stint for educator in database
            </button>
            <button className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 flex items-center text-sm">
              <Plus className="w-4 h-4 mr-2" />
              Create new educator in database
            </button>
          </div>
        </div>
        
        <div className="bg-white border rounded-lg overflow-hidden">
          <table className="min-w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Educator
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Role(s)
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Start Date
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  End Date
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Currently Active
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {schoolEducators.map(relationship => (
                <tr key={relationship.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <div className="flex-shrink-0 h-8 w-8">
                        <div className="h-8 w-8 rounded-full bg-gray-200 flex items-center justify-center">
                          <span className="text-sm font-medium text-gray-600">
                            {relationship.educatorName?.split(' ').map(n => n[0]).join('') || '??'}
                          </span>
                        </div>
                      </div>
                      <div className="ml-4">
                        <div className="text-sm font-medium text-gray-900">
                          {relationship.educatorName || 'Unknown Educator'}
                        </div>
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex flex-wrap gap-1">
                      {relationship.roles?.map((role, index) => (
                        <span key={index} className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                          {role}
                        </span>
                      )) || (
                        <span className="text-sm text-gray-500">No roles assigned</span>
                      )}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {relationship.startDate || '-'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {relationship.endDate || '-'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {relationship.currentlyActive ? (
                      <CheckCircle className="w-5 h-5 text-green-600" />
                    ) : (
                      <XCircle className="w-5 h-5 text-red-600" />
                    )}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <div className="flex space-x-2">
                      <button 
                        onClick={() => onEducatorOpen && onEducatorOpen(relationship.educatorId)}
                        className="bg-blue-600 text-white px-3 py-1 rounded text-xs hover:bg-blue-700"
                      >
                        Open
                      </button>
                      {relationship.currentlyActive && (
                        <button 
                          onClick={() => handleEndStint(relationship.id)}
                          className="bg-yellow-600 text-white px-3 py-1 rounded text-xs hover:bg-yellow-700"
                        >
                          End stint
                        </button>
                      )}
                      <button 
                        onClick={() => handleDeleteStint(relationship.id, relationship.educatorName)}
                        className="bg-red-600 text-white px-3 py-1 rounded text-xs hover:bg-red-700"
                      >
                        Delete stint
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
          
          {schoolEducators.length === 0 && (
            <div className="text-center py-8 text-gray-500">
              No educators assigned to this school yet.
            </div>
          )}
        </div>
      </div>
    );
  };

  const renderLocationsTab = () => {
    console.log('🔍 Locations Tab Debug:', {
      schoolId: school.id,
      schoolName: school.name,
      schoolLocations: schoolLocations,
      schoolLocationsLength: schoolLocations?.length
    });
    
    // Location management functions
    const handleAddLocation = () => {
      setSelectedLocation(null);
      setIsCreatingLocation(true);
      setShowLocationModal(true);
    };

    const handleEditLocation = (location) => {
      setSelectedLocation(location);
      setIsCreatingLocation(false);
      setShowLocationModal(true);
    };

    const handleEndLocationPeriod = async (locationId, locationAddress) => {
      if (window.confirm(`Are you sure you want to end the time period for "${locationAddress}"?`)) {
        try {
          const today = new Date().toISOString().split('T')[0];
          await updateRecord('Locations', locationId, {
            'End of time at location': today,
            'Current Mailing Address': false,
            'Current Physical Address': false
          });

          refetchLocations();
          alert('Location period ended successfully');
        } catch (error) {
          console.error('Error ending location period:', error);
          alert('Failed to end location period. Please try again.');
        }
      }
    };

    const handleDeleteLocation = async (locationId, locationAddress) => {
      if (window.confirm(`Are you sure you want to delete the location "${locationAddress}"? This action cannot be undone.`)) {
        try {
          await deleteRecord('Locations', locationId);
          refetchLocations();
          alert('Location deleted successfully');
        } catch (error) {
          console.error('Error deleting location:', error);
          alert('Failed to delete location. Please try again.');
        }
      }
    };

    const handleLocationSubmit = async (locationData) => {
      try {
        if (isCreatingLocation) {
          // Create new location
          await createRecord('Locations', {
            'Address': locationData.address,
            'Start of time at location': locationData.startDate,
            'End of time at location': locationData.endDate || null,
            'Location Type': locationData.locationType,
            'Current Mailing Address': locationData.currentMailingAddress,
            'Current Physical Address': locationData.currentPhysicalAddress,
            'Square feet': locationData.squareFeet ? parseInt(locationData.squareFeet) : null,
            'Max students licensed for': locationData.maxStudentsLicensedFor ? parseInt(locationData.maxStudentsLicensedFor) : null,
            'Neighborhood': locationData.neighborhood,
            'Co-location type': locationData.coLocationType,
            'Co-location partner': locationData.coLocationPartner,
            'Lease end date': locationData.leaseEndDate || null,
            'Lease': locationData.lease,
            'Time zone': locationData.timeZone,
            'school_id': school.id
          });
          alert('Location added successfully');
        } else {
          // Update existing location
          await updateRecord('Locations', locationData.id, {
            'Address': locationData.address,
            'Start of time at location': locationData.startDate,
            'End of time at location': locationData.endDate || null,
            'Location Type': locationData.locationType,
            'Current Mailing Address': locationData.currentMailingAddress,
            'Current Physical Address': locationData.currentPhysicalAddress,
            'Square feet': locationData.squareFeet ? parseInt(locationData.squareFeet) : null,
            'Max students licensed for': locationData.maxStudentsLicensedFor ? parseInt(locationData.maxStudentsLicensedFor) : null,
            'Neighborhood': locationData.neighborhood,
            'Co-location type': locationData.coLocationType,
            'Co-location partner': locationData.coLocationPartner,
            'Lease end date': locationData.leaseEndDate || null,
            'Lease': locationData.lease,
            'Time zone': locationData.timeZone
          });
          alert('Location updated successfully');
        }

        refetchLocations();
      } catch (error) {
        console.error('Error saving location:', error);
        alert('Failed to save location. Please try again.');
      }
    };
    
    return (
      <div>
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-lg font-semibold">Locations</h3>
          <button 
            onClick={handleAddLocation}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center text-sm"
          >
            <Plus className="w-4 h-4 mr-2" />
            Add Location
          </button>
        </div>
        
        <div className="bg-white border rounded-lg overflow-hidden">
          <table className="min-w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Address</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Start Date</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">End Date</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Current Mailing</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Current Physical</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {schoolLocations?.map(location => (
                <tr key={location.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4">
                    <div className="text-sm font-medium text-gray-900">{location.address || 'No address'}</div>
                    <div className="text-sm text-gray-500">{location.locationType || 'No type'}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{location.startDate || '-'}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{location.endDate || '-'}</td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {location.currentMailingAddress ? <CheckCircle className="w-5 h-5 text-green-600" /> : <XCircle className="w-5 h-5 text-red-600" />}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {location.currentPhysicalAddress ? <CheckCircle className="w-5 h-5 text-green-600" /> : <XCircle className="w-5 h-5 text-red-600" />}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <div className="flex space-x-2">
                      <button 
                        onClick={() => handleEditLocation(location)}
                        disabled={mutationLoading}
                        className="bg-blue-600 text-white px-3 py-1 rounded text-xs hover:bg-blue-700 disabled:bg-blue-300 disabled:cursor-not-allowed"
                      >
                        Edit
                      </button>
                      {!location.endDate && (
                        <button 
                          onClick={() => handleEndLocationPeriod(location.id, location.address)}
                          disabled={mutationLoading}
                          className="bg-yellow-600 text-white px-3 py-1 rounded text-xs hover:bg-yellow-700 disabled:bg-yellow-300 disabled:cursor-not-allowed"
                        >
                          {mutationLoading ? 'Ending...' : 'End period'}
                        </button>
                      )}
                      <button 
                        onClick={() => handleDeleteLocation(location.id, location.address)}
                        disabled={mutationLoading}
                        className="bg-red-600 text-white px-3 py-1 rounded text-xs hover:bg-red-700 disabled:bg-red-300 disabled:cursor-not-allowed"
                      >
                        {mutationLoading ? 'Deleting...' : 'Delete'}
                      </button>
                    </div>
                  </td>
                </tr>
              )) || []}
            </tbody>
          </table>
          {(!schoolLocations || schoolLocations.length === 0) && (
            <div className="text-center py-8 text-gray-500">
              No locations added for this school yet.
            </div>
          )}
        </div>

        {/* Location Edit Modal */}
        <LocationEditModal
          isOpen={showLocationModal}
          onClose={() => {
            setShowLocationModal(false);
            setSelectedLocation(null);
            setIsCreatingLocation(false);
          }}
          onSubmit={handleLocationSubmit}
          location={selectedLocation}
          isCreating={isCreatingLocation}
          schoolId={school.id}
        />
      </div>
    );
  };

  const renderGovernanceTab = () => {
    return (
      <div className="grid grid-cols-2 gap-8">
        <div>
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-lg font-semibold">Board Members</h3>
            <button className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center text-sm">
              <Plus className="w-4 h-4 mr-2" />Add Member
            </button>
          </div>
          <div className="bg-white border rounded-lg overflow-hidden">
            <div className="text-center py-8 text-gray-500">No board members added yet.</div>
          </div>
        </div>
        <div>
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-lg font-semibold">Policies and Documents</h3>
            <button className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center text-sm">
              <Plus className="w-4 h-4 mr-2" />Add Document
            </button>
          </div>
          <div className="bg-white border rounded-lg overflow-hidden">
            <table className="min-w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Document Type</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {governanceDocs.map(doc => (
                  <tr key={doc.id} className="hover:bg-gray-50">
                    <td className="px-4 py-4">
                      <div className="text-sm font-medium text-gray-900">{doc.documentType}</div>
                      {doc.docNotes && <div className="text-sm text-gray-500 mt-1">{doc.docNotes}</div>}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">{doc.date}</td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm font-medium">
                      <button onClick={() => window.open(doc.docLink, '_blank')} className="text-blue-600 hover:text-blue-900 mr-3">
                        <ExternalLink className="w-4 h-4" />
                      </button>
                      <button className="text-red-600 hover:text-red-900">Delete</button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
            {governanceDocs.length === 0 && <div className="text-center py-8 text-gray-500">No governance documents added yet.</div>}
          </div>
        </div>
      </div>
    );
  };

  const renderGuidesTab = () => {
    return (
      <div>
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-lg font-semibold">Guide Assignments</h3>
          <button className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center text-sm">
            <Plus className="w-4 h-4 mr-2" />Add Assignment
          </button>
        </div>
        
        <div className="bg-white border rounded-lg overflow-hidden">
          <table className="min-w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Guide</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Start Date</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">End Date</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Currently Active</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {guideAssignments.map(assignment => (
                <tr key={assignment.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <div className="flex-shrink-0 h-8 w-8">
                        <div className="h-8 w-8 rounded-full bg-gray-200 flex items-center justify-center">
                          <span className="text-sm font-medium text-gray-600">
                            {assignment.guideShortName?.split(' ').map(n => n[0]).join('') || '??'}
                          </span>
                        </div>
                      </div>
                      <div className="ml-4">
                        <div className="text-sm font-medium text-gray-900">{assignment.guideShortName}</div>
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                      {assignment.role}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{assignment.startDate}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{assignment.endDate || '-'}</td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {assignment.currentlyActive ? <CheckCircle className="w-5 h-5 text-green-600" /> : <XCircle className="w-5 h-5 text-red-600" />}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <button className="text-blue-600 hover:text-blue-900 mr-3">Open</button>
                    <button className="text-red-600 hover:text-red-900">Delete</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
          {guideAssignments.length === 0 && <div className="text-center py-8 text-gray-500">No guide assignments for this school yet.</div>}
        </div>
      </div>
    );
  };

  const renderSSJOSSTab = () => (
    <div className="grid grid-cols-4 gap-8">
      <div className="space-y-4">
        <DetailRow label="SSJ Stage" value={school.ssjStage} />
        <DetailRow label="SSJ - Target City" value={school.ssjTargetCity} />
        <DetailRow label="SSJ - Board development" value={school.ssjBoardDevelopment} />
        <DetailRow label="SSJ - Has the ETL identified a partner?" value={school.ssjHasETLPartner} />
        <DetailRow label="SSJ - Total Startup Funding Needed" value={school.ssjTotalStartupFunding} type="currency" />
        <DetailRow label="SSJ - Fundraising narrative" value={school.ssjFundraisingNarrative} type="multiline" />
      </div>
      <div className="space-y-4">
        <DetailRow label="SSJ - Original Projected Open Date" value={school.ssjOriginalProjectedOpenDate} type="date" />
        <DetailRow label="SSJ - Target State" value={school.ssjTargetState} />
        <DetailRow label="SSJ - Readiness to Open Rating" value={school.ssjReadinessRating} />
        <DetailRow label="SSJ - Facility" value={school.ssjFacility} />
        <DetailRow label="Building4Good Firm & Attorney" value={school.building4GoodFirm} />
      </div>
      <div className="space-y-4">
        <DetailRow label="SSJ - Proj Open School Year" value={school.ssjProjOpenSchoolYear} />
        <DetailRow label="Risk Factors" value={school.riskFactors} />
        <DetailRow label="Entered Visioning Date" value={school.enteredVisioningDate} type="date" />
        <DetailRow label="Entered Planning Date" value={school.enteredPlanningDate} type="date" />
        <DetailRow label="Entered Startup Date" value={school.enteredStartupDate} type="date" />
      </div>
      <div className="space-y-8">
        <div className="space-y-4">
          <DetailRow label="SSJ - Projected Open" value={school.ssjProjectedOpen} type="date" />
          <DetailRow label="Watchlist" value={school.watchlist} />
        </div>
        <div>
          <h4 className="text-lg font-semibold mb-4 text-gray-900">Systems</h4>
          <div className="space-y-4">
            <DetailRow label="Google Voice" value={school.googleVoice} />
            <DetailRow label="Budget Utility" value={school.budgetUtility} />
            <DetailRow label="Admissions System" value={school.admissionsSystem} />
            <DetailRow label="QBO" value={school.qbo} />
            <DetailRow label="Website tool" value={school.websiteTool} />
          </div>
        </div>
      </div>
    </div>
  );

  const renderMembershipFeesTab = () => {
    const { data: membershipUpdates } = useMembershipFeeUpdates(school.id, selectedSchoolYear);
    const selectedRecord = selectedSchoolYear ? membershipFeeRecords.find(record => record.schoolYear === selectedSchoolYear) : null;

    return (
      <div className="grid grid-cols-12 gap-8">
        <div className="col-span-3">
          <h3 className="text-lg font-semibold mb-4">School Years</h3>
          <div className="space-y-2">
            {membershipFeeRecords.map(record => (
              <button
                key={record.id}
                onClick={() => setSelectedSchoolYear(record.schoolYear)}
                className={`w-full text-left px-4 py-3 rounded-lg border transition-colors ${
                  selectedSchoolYear === record.schoolYear ? 'bg-blue-50 border-blue-500 text-blue-700' : 'bg-white border-gray-200 hover:bg-gray-50'
                }`}
              >
                {record.schoolYear}
              </button>
            ))}
            {membershipFeeRecords.length === 0 && <div className="text-center py-8 text-gray-500">No fee records found</div>}
          </div>
        </div>

        <div className="col-span-5">
          {selectedRecord ? (
            <div>
              <h3 className="text-lg font-semibold mb-4">{selectedRecord.schoolYear} Details</h3>
              <div className="bg-white border rounded-lg p-6">
                <div className="grid grid-cols-2 gap-x-6 gap-y-3">
                  <DetailRow label="School Year" value={selectedRecord.schoolYear} />
                  <DetailRow label="Initial Fee" value={selectedRecord.initialFee} type="currency" />
                  <DetailRow label="Revised Amount" value={selectedRecord.revisedAmount} type="currency" />
                  <DetailRow label="Amount Paid" value={selectedRecord.amountPaid} type="currency" />
                  <DetailRow label="Amount Receivable" value={selectedRecord.amountReceivable} type="currency" />
                  <DetailRow label="Revenue" value={selectedRecord.revenue} type="currency" />
                  <DetailRow label="Exemption Status" value={selectedRecord.exemptionStatus} />
                  <DetailRow label="Nth Year" value={selectedRecord.nthYear} />
                </div>
              </div>
            </div>
          ) : (
            <div className="text-center py-8 text-gray-500">
              <h3 className="text-lg font-semibold mb-2">Select a School Year</h3>
              <p>Choose a school year from the left to view fee details</p>
            </div>
          )}
        </div>

        <div className="col-span-4">
          {selectedSchoolYear ? (
            <div>
              <h3 className="text-lg font-semibold mb-4">{selectedSchoolYear} Updates</h3>
              <div className="space-y-3">
                {membershipUpdates.map(update => (
                  <div key={update.id} className="bg-white border rounded-lg p-4">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-medium text-gray-900">{update.updateType}</span>
                      <span className="text-sm text-gray-500">{update.date}</span>
                    </div>
                    {update.amountPaid && (
                      <div className="text-sm text-green-600 mb-1">Amount: ${update.amountPaid.toLocaleString()}</div>
                    )}
                    {update.revisedFeeAmount && (
                      <div className="text-sm text-blue-600 mb-1">New Fee: ${update.revisedFeeAmount.toLocaleString()}</div>
                    )}
                    <div className="text-sm text-gray-600">{update.explanation}</div>
                  </div>
                ))}
                {membershipUpdates.length === 0 && <div className="text-center py-8 text-gray-500">No updates for this school year</div>}
              </div>
            </div>
          ) : (
            <div className="text-center py-8 text-gray-500">Select a school year to view updates</div>
          )}
        </div>
      </div>
    );
  };

  const renderGrantsLoansTab = () => {
    return (
      <div className="grid grid-cols-2 gap-8">
        <div>
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-lg font-semibold">Grants</h3>
            <button className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 flex items-center text-sm">
              <Plus className="w-4 h-4 mr-2" />Create New Grant
            </button>
          </div>
          
          <div className="bg-white border rounded-lg overflow-hidden">
            <table className="min-w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Issue Date</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Issued By</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {grants.map(grant => (
                  <tr key={grant.id} className="hover:bg-gray-50">
                    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-900">{grant.issueDate}</td>
                    <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">${grant.amount?.toLocaleString()}</td>
                    <td className="px-4 py-3 whitespace-nowrap">
                      <div className="text-sm font-medium text-gray-900">{grant.issuedBy}</div>
                      <div className="text-sm text-gray-500">{grant.partnerName}</div>
                    </td>
                    <td className="px-4 py-3 whitespace-nowrap"><StatusBadge status={grant.status} /></td>
                    <td className="px-4 py-3 whitespace-nowrap text-sm font-medium">
                      <button className="text-blue-600 hover:text-blue-900 mr-3">Open</button>
                      <button className="text-red-600 hover:text-red-900">Delete</button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
            {grants.length === 0 && <div className="text-center py-8 text-gray-500">No grants found for this school.</div>}
          </div>
        </div>

        <div>
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-lg font-semibold">Loans</h3>
            <button className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center text-sm">
              <Plus className="w-4 h-4 mr-2" />Create New Loan
            </button>
          </div>
          
          <div className="bg-white border rounded-lg overflow-hidden">
            <table className="min-w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Issue Date</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {loans.map(loan => (
                  <tr key={loan.id} className="hover:bg-gray-50">
                    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-900">{loan.issueDate}</td>
                    <td className="px-4 py-3 whitespace-nowrap">
                      <div className="text-sm font-medium text-gray-900">${loan.amount?.toLocaleString()}</div>
                      <div className="text-sm text-gray-500">{(loan.interestRate * 100).toFixed(1)}% interest</div>
                    </td>
                    <td className="px-4 py-3 whitespace-nowrap"><StatusBadge status={loan.status} /></td>
                    <td className="px-4 py-3 whitespace-nowrap text-sm font-medium">
                      <button className="text-blue-600 hover:text-blue-900 mr-3">Open</button>
                      <button className="text-red-600 hover:text-red-900">Delete</button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
            {loans.length === 0 && <div className="text-center py-8 text-gray-500">No loans found for this school.</div>}
          </div>
        </div>
      </div>
    );
  };

  const renderNotesActionsTab = () => {
    return (
      <div className="grid grid-cols-2 gap-8">
        <div>
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-lg font-semibold">School Notes</h3>
            <button className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center text-sm">
              <Plus className="w-4 h-4 mr-2" />Add Note
            </button>
          </div>
          
          <div className="space-y-4">
            {schoolNotes.map(note => (
              <div key={note.id} className="bg-white border rounded-lg p-6">
                <div className="flex items-start justify-between mb-3">
                  <div className="flex items-center space-x-3">
                    <div className="flex-shrink-0 h-8 w-8">
                      <div className="h-8 w-8 rounded-full bg-gray-200 flex items-center justify-center">
                        <span className="text-sm font-medium text-gray-600">
                          {note.createdBy?.split(' ').map(n => n[0]).join('') || '??'}
                        </span>
                      </div>
                    </div>
                    <div>
                      <div className="text-sm font-medium text-gray-900">{note.createdBy}</div>
                      <div className="text-sm text-gray-500">{note.createdDate}</div>
                    </div>
                    {note.isPrivate && (
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                        Private
                      </span>
                    )}
                  </div>
                  <div className="flex items-center space-x-2">
                    <button className="text-blue-600 hover:text-blue-900 text-sm">Edit</button>
                    <button className="text-red-600 hover:text-red-900 text-sm">Delete</button>
                  </div>
                </div>
                <div className="text-sm text-gray-900">{note.noteText}</div>
              </div>
            ))}
            {schoolNotes.length === 0 && <div className="text-center py-8 text-gray-500">No notes found for this school.</div>}
          </div>
        </div>

        <div>
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-lg font-semibold">Action Steps</h3>
            <button className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 flex items-center text-sm">
              <Plus className="w-4 h-4 mr-2" />Add Action
            </button>
          </div>
          
          <div className="bg-white border rounded-lg overflow-hidden">
            <table className="min-w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Item</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Assignee</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Due Date</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {actionSteps.map(action => (
                  <tr key={action.id} className="hover:bg-gray-50">
                    <td className="px-4 py-3">
                      <div className="text-sm font-medium text-gray-900">{action.item}</div>
                    </td>
                    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-900">{action.assignee}</td>
                    <td className="px-4 py-3 whitespace-nowrap"><StatusBadge status={action.status} /></td>
                    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-900">{action.dueDate}</td>
                    <td className="px-4 py-3 whitespace-nowrap text-sm font-medium">
                      <button className="text-blue-600 hover:text-blue-900 mr-3">Edit</button>
                      <button className="text-red-600 hover:text-red-900">Delete</button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
            {actionSteps.length === 0 && <div className="text-center py-8 text-gray-500">No action steps found for this school.</div>}
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="h-full flex flex-col bg-white">
      <div className="border-b bg-gray-50 px-6 py-4">
        <div className="flex items-center mb-4">
          <button 
            onClick={onBack}
            className="mr-4 p-2 hover:bg-gray-200 rounded-lg transition-colors"
          >
            <ArrowLeft className="w-5 h-5" />
          </button>
          <h1 className="text-2xl font-bold text-gray-900">{school.name}</h1>
        </div>
        
        <div className="flex space-x-8 overflow-x-auto">
          {tabs.map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`whitespace-nowrap pb-2 px-1 border-b-2 font-medium text-sm transition-colors ${
                activeTab === tab.id
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              {tab.label}
            </button>
          ))}
        </div>
      </div>

      <div className="flex-1 overflow-y-auto p-6">
        {renderTabContent()}
      </div>
    </div>
  );
};

export default SchoolDetails;

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\COMPONENTS\SCHOOLS\SCHOOLLOCATIONS.JSX CODE IS BELOW
import React, { useState } from 'react';
import { Plus, CheckCircle, XCircle } from 'lucide-react';
import { useSchoolLocations } from '../../hooks/useUnifiedData';
import { useAirtableMutations } from '../../hooks/useAirtableData';
import LocationEditModal from '../../LocationEditModal';

const SchoolLocations = ({ school }) => {
    const [showLocationEditModal, setShowLocationEditModal] = useState(false);
    const [selectedLocation, setSelectedLocation] = useState(null);

    const { data: schoolLocations, refetch: refetchLocations } = useSchoolLocations(school.id);
    const { updateRecord, deleteRecord, loading: mutationLoading } = useAirtableMutations();

    const handleEditLocation = (location) => {
        setSelectedLocation(location);
        setShowLocationEditModal(true);
    };

    const handleEndLocationPeriod = async (locationId) => {
        try {
            const today = new Date().toISOString().split('T')[0];
            await updateRecord('Locations', locationId, {
                'End Date': today,
                'Current Mailing Address': false,
                'Current Physical Address': false,
                'Currently Active': false
            });

            refetchLocations();
            alert('Location period ended successfully');
        } catch (error) {
            console.error('Error ending location period:', error);
            alert('Failed to end location period. Please try again.');
        }
    };

    const handleDeleteLocation = async (locationId, address) => {
        if (window.confirm(`Are you sure you want to delete the location "${address}"? This action cannot be undone.`)) {
            try {
                await deleteRecord('Locations', locationId);
                refetchLocations();
                alert('Location deleted successfully');
            } catch (error) {
                console.error('Error deleting location:', error);
                alert('Failed to delete location. Please try again.');
            }
        }
    };

    const handleUpdateLocation = async (updatedLocation) => {
        try {
            await updateRecord('Locations', updatedLocation.id, {
                'Address': updatedLocation.address,
                'Location Type': updatedLocation.locationType,
                'Start Date': updatedLocation.startDate,
                'End Date': updatedLocation.endDate || null,
                'Current Mailing Address': updatedLocation.currentMailingAddress,
                'Current Physical Address': updatedLocation.currentPhysicalAddress,
                'Currently Active': updatedLocation.currentlyActive
            });

            refetchLocations();
            alert('Location updated successfully');
        } catch (error) {
            console.error('Error updating location:', error);
            alert('Failed to update location. Please try again.');
        }
    };

    const handleAddLocation = () => {
        // You can implement this to show an "Add Location" modal
        // For now, we'll just show an alert
        alert('Add Location functionality would be implemented here');
    };

    return (
        <div>
            <div className="flex items-center justify-between mb-6">
                <h3 className="text-lg font-semibold">Locations</h3>
                <button
                    onClick={handleAddLocation}
                    className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center text-sm"
                >
                    <Plus className="w-4 h-4 mr-2" />
                    Add Location
                </button>
            </div>

            <div className="bg-white border rounded-lg overflow-hidden">
                <table className="min-w-full">
                    <thead className="bg-gray-50">
                        <tr>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Address
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Start Date
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                End Date
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Current Mailing Address
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Current Physical Address
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Actions
                            </th>
                        </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                        {schoolLocations.map(location => (
                            <tr key={location.id} className="hover:bg-gray-50">
                                <td className="px-6 py-4">
                                    <div className="text-sm font-medium text-gray-900">
                                        {location.address}
                                    </div>
                                    <div className="text-sm text-gray-500">
                                        {location.locationType}
                                    </div>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    {location.startDate || '-'}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    {location.endDate || '-'}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap">
                                    {location.currentMailingAddress ? (
                                        <CheckCircle className="w-5 h-5 text-green-600" />
                                    ) : (
                                        <XCircle className="w-5 h-5 text-red-600" />
                                    )}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap">
                                    {location.currentPhysicalAddress ? (
                                        <CheckCircle className="w-5 h-5 text-green-600" />
                                    ) : (
                                        <XCircle className="w-5 h-5 text-red-600" />
                                    )}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                    <div className="flex space-x-2">
                                        <button
                                            onClick={() => handleEditLocation(location)}
                                            className="bg-blue-600 text-white px-3 py-1 rounded text-xs hover:bg-blue-700"
                                            disabled={mutationLoading}
                                        >
                                            Edit
                                        </button>
                                        {location.currentlyActive && (
                                            <button
                                                onClick={() => handleEndLocationPeriod(location.id)}
                                                className="bg-yellow-600 text-white px-3 py-1 rounded text-xs hover:bg-yellow-700"
                                                disabled={mutationLoading}
                                            >
                                                {mutationLoading ? 'Ending...' : 'End period'}
                                            </button>
                                        )}
                                        <button
                                            onClick={() => handleDeleteLocation(location.id, location.address)}
                                            className="bg-red-600 text-white px-3 py-1 rounded text-xs hover:bg-red-700"
                                            disabled={mutationLoading}
                                        >
                                            {mutationLoading ? 'Deleting...' : 'Delete'}
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>

                {schoolLocations.length === 0 && (
                    <div className="text-center py-8 text-gray-500">
                        No locations added for this school yet.
                    </div>
                )}
            </div>

            {/* Location Edit Modal */}
            <LocationEditModal
                isOpen={showLocationEditModal}
                onClose={() => {
                    setShowLocationEditModal(false);
                    setSelectedLocation(null);
                }}
                onSubmit={handleUpdateLocation}
                location={selectedLocation}
            />
        </div>
    );
};

export default SchoolLocations;

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\COMPONENTS\SCHOOLS\SCHOOLSUMMARY.JSX CODE IS BELOW
import React, { useState } from 'react';
import { FileText } from 'lucide-react';
import DetailRow from '../shared/DetailRow';
import StatusBadge from '../shared/StatusBadge';

const SchoolSummary = ({ school }) => {
    const [isEditing, setIsEditing] = useState(false);
    // Add edit functionality here...

    return (
        <div className="space-y-8">
            {/* Edit Button */}
            <div className="flex justify-end">
                <button
                    onClick={() => setIsEditing(!isEditing)}
                    className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center text-sm"
                >
                    {isEditing ? 'Save' : 'Edit'}
                </button>
            </div>

            {/* Header Section */}
            <div className="grid grid-cols-4 gap-x-6 gap-y-2">
                {/* School Logo */}
                <div className="row-span-3 flex items-center justify-center">
                    <div className="w-32 h-32 bg-gray-100 rounded-lg flex items-center justify-center">
                        <FileText className="w-16 h-16 text-gray-400" />
                    </div>
                </div>

                {/* Basic Info */}
                <DetailRow label="School Name" value={school.name} />
                <DetailRow label="Short Name" value={school.shortName} />
                <DetailRow label="Ages Served" value={school.agesServed?.join(', ')} />

                <DetailRow label="Governance Model" value={school.governanceModel} />
                <DetailRow label="Founders" value={school.founders?.join(', ')} />
                <DetailRow label="Current TLs" value={school.currentTLs?.join(', ')} />

                <DetailRow label="School Open Date" value={school.schoolOpenDate || school.opened} />
                <DetailRow label="School Status" value={<StatusBadge status={school.status} />} />
                <DetailRow label="Membership Status" value={<StatusBadge status={school.membershipStatus} />} />
            </div>

            {/* Additional Info */}
            <div className="grid grid-cols-4 gap-x-6 gap-y-2">
                <DetailRow label="Program Focus" value={school.programFocus} />
                <DetailRow label="Max Capacity Enrollments" value={school.maxCapacityEnrollments} />
                <DetailRow label="Number of Classrooms" value={school.numberOfClassrooms} />
                <DetailRow label="Public Funding" value={school.publicFunding} />
                <DetailRow label="Flexible Tuition" value={school.flexibleTuition} />
                <DetailRow label="School Calendar" value={school.schoolCalendar} />
                <DetailRow label="School Schedule" value={school.schoolSchedule} />
            </div>
        </div>
    );
};

export default SchoolSummary;

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\COMPONENTS\SCHOOLS\SCHOOLTLS.JSX CODE IS BELOW
import React, { useState } from 'react';
import { Plus, CheckCircle, XCircle } from 'lucide-react';
import { useEducatorsXSchools } from '../../hooks/useUnifiedData';
import { useAirtableMutations } from '../../hooks/useAirtableData';
import AddEducatorStintModal from '../../AddEducatorStintModal';
import CreateEducatorModal from '../../CreateEducatorModal';

const SchoolTLs = ({ school, onEducatorOpen, allEducators = [] }) => {
    const [showAddStintModal, setShowAddStintModal] = useState(false);
    const [showCreateEducatorModal, setShowCreateEducatorModal] = useState(false);

    const { data: educatorsXSchools, refetch: refetchEducatorsXSchools } = useEducatorsXSchools();
    const { createRecord, updateRecord, deleteRecord, loading: mutationLoading } = useAirtableMutations();

    // Filter relationships for this school
    const schoolEducators = educatorsXSchools.filter(exs => exs.schoolId === school.id);

    const handleEndStint = async (stintId) => {
        try {
            const today = new Date().toISOString().split('T')[0];
            await updateRecord('Educators x Schools', stintId, {
                'End Date': today,
                'Currently Active': false
            });

            refetchEducatorsXSchools();
            alert('Stint ended successfully');
        } catch (error) {
            console.error('Error ending stint:', error);
            alert('Failed to end stint. Please try again.');
        }
    };

    const handleDeleteStint = async (stintId, educatorName) => {
        if (window.confirm(`Are you sure you want to delete the connection between ${educatorName} and this school? This action cannot be undone.`)) {
            try {
                await deleteRecord('Educators x Schools', stintId);
                refetchEducatorsXSchools();
                alert('Stint deleted successfully');
            } catch (error) {
                console.error('Error deleting stint:', error);
                alert('Failed to delete stint. Please try again.');
            }
        }
    };

    const handleAddStint = async (newStint) => {
        try {
            await createRecord('Educators x Schools', {
                'Educator': [newStint.educatorId],
                'School': [newStint.schoolId],
                'Start Date': newStint.startDate,
                'Currently Active': newStint.currentlyActive,
                'Roles': newStint.roles
            });

            refetchEducatorsXSchools();
            alert('Educator stint added successfully');
        } catch (error) {
            console.error('Error adding stint:', error);
            alert('Failed to add stint. Please try again.');
        }
    };

    const handleCreateEducator = async ({ educator, stint }) => {
        try {
            // First create the educator
            const newEducatorRecord = await createRecord('Educators', {
                'First Name': educator.firstName,
                'Last Name': educator.lastName,
                'Contact Email': educator.email,
                'Primary phone': educator.phone,
                'Pronouns': educator.pronouns,
                'Discovery status': educator.discoveryStatus,
                'Montessori Certified': educator.montessoriCertified
            });

            // Then create the educator x school relationship
            await createRecord('Educators x Schools', {
                'Educator': [newEducatorRecord.id],
                'School': [stint.schoolId],
                'Start Date': stint.startDate,
                'Currently Active': stint.currentlyActive,
                'Roles': stint.roles
            });

            refetchEducatorsXSchools();
            alert('Educator created and added to school successfully');
        } catch (error) {
            console.error('Error creating educator:', error);
            alert('Failed to create educator. Please try again.');
        }
    };

    return (
        <div>
            <div className="flex items-center justify-between mb-6">
                <h3 className="text-lg font-semibold">Teacher Leaders & Staff</h3>
                <div className="flex space-x-2">
                    <button
                        onClick={() => setShowAddStintModal(true)}
                        className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center text-sm"
                    >
                        <Plus className="w-4 h-4 mr-2" />
                        Add stint for educator in database
                    </button>
                    <button
                        onClick={() => setShowCreateEducatorModal(true)}
                        className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 flex items-center text-sm"
                    >
                        <Plus className="w-4 h-4 mr-2" />
                        Create new educator in database
                    </button>
                </div>
            </div>

            <div className="bg-white border rounded-lg overflow-hidden">
                <table className="min-w-full">
                    <thead className="bg-gray-50">
                        <tr>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Educator
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Role(s)
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Start Date
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                End Date
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Currently Active
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Actions
                            </th>
                        </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                        {schoolEducators.map(relationship => (
                            <tr key={relationship.id} className="hover:bg-gray-50">
                                <td className="px-6 py-4 whitespace-nowrap">
                                    <div className="flex items-center">
                                        <div className="flex-shrink-0 h-8 w-8">
                                            <div className="h-8 w-8 rounded-full bg-gray-200 flex items-center justify-center">
                                                <span className="text-sm font-medium text-gray-600">
                                                    {relationship.educatorName?.split(' ').map(n => n[0]).join('') || '??'}
                                                </span>
                                            </div>
                                        </div>
                                        <div className="ml-4">
                                            <div className="text-sm font-medium text-gray-900">
                                                {relationship.educatorName || 'Unknown Educator'}
                                            </div>
                                        </div>
                                    </div>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap">
                                    <div className="flex flex-wrap gap-1">
                                        {relationship.roles?.map((role, index) => (
                                            <span key={index} className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                                {role}
                                            </span>
                                        )) || (
                                                <span className="text-sm text-gray-500">No roles assigned</span>
                                            )}
                                    </div>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    {relationship.startDate || '-'}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    {relationship.endDate || '-'}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap">
                                    {relationship.currentlyActive ? (
                                        <CheckCircle className="w-5 h-5 text-green-600" />
                                    ) : (
                                        <XCircle className="w-5 h-5 text-red-600" />
                                    )}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                    <div className="flex space-x-2">
                                        <button
                                            onClick={() => onEducatorOpen && onEducatorOpen(relationship.educatorId)}
                                            className="bg-blue-600 text-white px-3 py-1 rounded text-xs hover:bg-blue-700"
                                        >
                                            Open
                                        </button>
                                        {relationship.currentlyActive && (
                                            <button
                                                onClick={() => handleEndStint(relationship.id)}
                                                disabled={mutationLoading}
                                                className="bg-yellow-600 text-white px-3 py-1 rounded text-xs hover:bg-yellow-700 disabled:bg-yellow-300 disabled:cursor-not-allowed"
                                            >
                                                {mutationLoading ? 'Ending...' : 'End stint'}
                                            </button>
                                        )}
                                        <button
                                            onClick={() => handleDeleteStint(relationship.id, relationship.educatorName)}
                                            disabled={mutationLoading}
                                            className="bg-red-600 text-white px-3 py-1 rounded text-xs hover:bg-red-700 disabled:bg-red-300 disabled:cursor-not-allowed"
                                        >
                                            {mutationLoading ? 'Deleting...' : 'Delete stint'}
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>

                {schoolEducators.length === 0 && (
                    <div className="text-center py-8 text-gray-500">
                        No educators assigned to this school yet.
                    </div>
                )}
            </div>

            {/* Modals */}
            <AddEducatorStintModal
                isOpen={showAddStintModal}
                onClose={() => setShowAddStintModal(false)}
                onSubmit={handleAddStint}
                schoolId={school.id}
                allEducators={allEducators}
            />

            <CreateEducatorModal
                isOpen={showCreateEducatorModal}
                onClose={() => setShowCreateEducatorModal(false)}
                onSubmit={handleCreateEducator}
                schoolId={school.id}
            />
        </div>
    );
};

export default SchoolTLs;

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\COMPONENTS\SHARED\DATATABLE.JSX CODE IS BELOW
import React, { useMemo, useState, useEffect } from 'react';
import MultiSelectDropdown from './MultiSelectDropdown';

const DataTable = ({
    data,
    columns,
    onRowClick,
    searchTerm,
    showFilters,
    columnFilters,
    onColumnFilterChange
}) => {
    // Add debounced search term
    const [debouncedSearchTerm, setDebouncedSearchTerm] = useState(searchTerm || '');

    // Debounce search term
    useEffect(() => {
        const timer = setTimeout(() => {
            setDebouncedSearchTerm(searchTerm || '');
        }, 300);

        return () => clearTimeout(timer);
    }, [searchTerm]);

    // Define which columns should use multi-select
    const multiSelectColumns = {
        'status': true,
        'agesServed': true,
        'governanceModel': true,
        'membershipStatus': true,
        'discoveryStatus': true,
        'individualType': true,
        'raceEthnicity': true,
        'role': true
    };

    // Get unique values for multi-select columns
    const getUniqueValues = (columnKey) => {
        const values = new Set();
        data.forEach(item => {
            const value = item[columnKey];
            if (Array.isArray(value)) {
                value.forEach(v => v && values.add(v));
            } else if (value) {
                values.add(value);
            }
        });
        return Array.from(values).sort();
    };

    // Apply both search and column filters
    const filteredData = useMemo(() => {
        let result = data;

        // Apply search term filter with debounced value
        if (debouncedSearchTerm) {
            result = result.filter(item =>
                Object.values(item).some(value => {
                    if (Array.isArray(value)) {
                        return value.some(v => v && v.toString().toLowerCase().includes(debouncedSearchTerm.toLowerCase()));
                    }
                    return value && value.toString().toLowerCase().includes(debouncedSearchTerm.toLowerCase());
                })
            );
        }

        // Apply column filters
        Object.entries(columnFilters).forEach(([columnKey, filterValue]) => {
            if (filterValue) {
                if (multiSelectColumns[columnKey] && Array.isArray(filterValue) && filterValue.length > 0) {
                    // Multi-select filter logic
                    result = result.filter(item => {
                        const itemValue = item[columnKey];
                        if (Array.isArray(itemValue)) {
                            // Check if any of the item's values match any selected filter values
                            return itemValue.some(val => filterValue.includes(val));
                        } else {
                            // Check if the item's value matches any selected filter values
                            return filterValue.includes(itemValue);
                        }
                    });
                } else if (typeof filterValue === 'string' && filterValue.trim()) {
                    // Text filter logic
                    result = result.filter(item => {
                        const itemValue = item[columnKey];
                        if (itemValue == null) return false;
                        if (Array.isArray(itemValue)) {
                            return itemValue.some(val =>
                                val && val.toString().toLowerCase().includes(filterValue.toLowerCase())
                            );
                        }
                        return itemValue.toString().toLowerCase().includes(filterValue.toLowerCase());
                    });
                }
            }
        });

        return result;
    }, [data, debouncedSearchTerm, columnFilters]); // Now debouncedSearchTerm is properly defined

    const handleColumnFilterChange = (columnKey, value) => {
        if (onColumnFilterChange) {
            onColumnFilterChange(columnKey, value);
        }
    };

    const renderFilterInput = (col) => {
        if (multiSelectColumns[col.key]) {
            const options = getUniqueValues(col.key);
            const selectedValues = columnFilters[col.key] || [];

            return (
                <MultiSelectDropdown
                    options={options}
                    selectedValues={selectedValues}
                    onChange={(values) => handleColumnFilterChange(col.key, values)}
                    placeholder={`Filter ${col.label}...`}
                />
            );
        } else {
            return (
                <input
                    type="text"
                    placeholder={`Filter ${col.label}...`}
                    value={columnFilters[col.key] || ''}
                    onChange={(e) => handleColumnFilterChange(col.key, e.target.value)}
                    className="w-full px-2 py-1 text-xs border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                />
            );
        }
    };

    return (
        <div className="overflow-x-auto">
            <table className="min-w-full bg-white">
                <thead className="bg-gray-50">
                    <tr>
                        {columns.map((col) => (
                            <th key={col.key} className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                {col.label}
                            </th>
                        ))}
                    </tr>

                    {/* Filter Row */}
                    {showFilters && (
                        <tr className="bg-gray-100">
                            {columns.map((col) => (
                                <th key={`filter-${col.key}`} className="px-6 py-2">
                                    {renderFilterInput(col)}
                                </th>
                            ))}
                        </tr>
                    )}
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                    {filteredData.map((item) => (
                        <tr
                            key={item.id}
                            className="hover:bg-gray-50 cursor-pointer transition-colors"
                            onClick={() => onRowClick && onRowClick(item)}
                        >
                            {columns.map((col) => (
                                <td key={col.key} className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    {col.render ? col.render(item[col.key], item) : item[col.key] || '-'}
                                </td>
                            ))}
                        </tr>
                    ))}
                </tbody>
            </table>

            {filteredData.length === 0 && (
                <div className="text-center py-8 text-gray-500">
                    No results found. Try adjusting your filters or search term.
                </div>
            )}
        </div>
    );
};

export default DataTable;

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\COMPONENTS\SHARED\DETAILROW.JSX CODE IS BELOW
import React from 'react';
import { CheckCircle, XCircle, ExternalLink } from 'lucide-react';

const DetailRow = ({ label, value, span = false, type = 'text' }) => {
    const renderValue = () => {
        // Handle null/undefined values
        if (value === null || value === undefined || value === '') {
            return <span className="text-gray-400">-</span>;
        }

        // Handle boolean values
        if (typeof value === 'boolean') {
            return value ? (
                <CheckCircle className="w-4 h-4 text-green-600" />
            ) : (
                <XCircle className="w-4 h-4 text-red-600" />
            );
        }

        // Handle arrays
        if (Array.isArray(value)) {
            if (value.length === 0) {
                return <span className="text-gray-400">-</span>;
            }
            return value.join(', ');
        }

        // Handle numbers
        if (typeof value === 'number') {
            return value.toLocaleString();
        }

        // Handle different types of content
        switch (type) {
            case 'url':
            case 'link':
                return (
                    <a
                        href={value}
                        className="text-blue-600 hover:text-blue-800 hover:underline flex items-center"
                        target="_blank"
                        rel="noopener noreferrer"
                    >
                        {value}
                        <ExternalLink className="w-3 h-3 ml-1" />
                    </a>
                );

            case 'email':
                return (
                    <a
                        href={`mailto:${value}`}
                        className="text-blue-600 hover:text-blue-800 hover:underline"
                    >
                        {value}
                    </a>
                );

            case 'phone':
                return (
                    <a
                        href={`tel:${value}`}
                        className="text-blue-600 hover:text-blue-800 hover:underline"
                    >
                        {value}
                    </a>
                );

            case 'currency':
                return new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD'
                }).format(value);

            case 'date':
                if (!value) return <span className="text-gray-400">-</span>;
                try {
                    const date = new Date(value);
                    return date.toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric'
                    });
                } catch (error) {
                    return value;
                }

            case 'percentage':
                return `${value}%`;

            case 'multiline':
                return (
                    <div className="whitespace-pre-wrap max-w-md">
                        {value}
                    </div>
                );

            case 'badge':
                // This would be used for status badges, but we'll keep it simple for now
                return (
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                        {value}
                    </span>
                );

            case 'text':
            default:
                return value;
        }
    };

    return (
        <div className={`py-2 ${span ? 'col-span-2' : ''}`}>
            <div className="text-sm font-medium text-gray-600 mb-1">{label}</div>
            <div className="text-sm text-gray-900">
                {renderValue()}
            </div>
        </div>
    );
};

// Helper component for editing mode
export const EditableDetailRow = ({
    label,
    field,
    value,
    onChange,
    type = 'text',
    options = null,
    placeholder = '',
    span = false,
    required = false
}) => {
    const handleChange = (newValue) => {
        if (onChange) {
            onChange(field, newValue);
        }
    };

    const renderInput = () => {
        switch (type) {
            case 'boolean':
                return (
                    <label className="flex items-center">
                        <input
                            type="checkbox"
                            checked={value || false}
                            onChange={(e) => handleChange(e.target.checked)}
                            className="mr-2 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                        />
                        <span className="text-sm">{value ? 'Yes' : 'No'}</span>
                    </label>
                );

            case 'select':
                return (
                    <select
                        value={value || ''}
                        onChange={(e) => handleChange(e.target.value)}
                        className="w-full px-3 py-1 border border-gray-300 rounded text-sm focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                        required={required}
                    >
                        <option value="">Select...</option>
                        {options?.map(option => (
                            <option key={option} value={option}>{option}</option>
                        ))}
                    </select>
                );

            case 'textarea':
            case 'multiline':
                return (
                    <textarea
                        value={value || ''}
                        onChange={(e) => handleChange(e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded text-sm focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                        rows={3}
                        placeholder={placeholder}
                        required={required}
                    />
                );

            case 'array':
                return (
                    <input
                        type="text"
                        value={Array.isArray(value) ? value.join(', ') : (value || '')}
                        onChange={(e) => handleChange(e.target.value.split(',').map(v => v.trim()).filter(v => v))}
                        className="w-full px-3 py-1 border border-gray-300 rounded text-sm focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                        placeholder={placeholder || "Separate multiple values with commas"}
                        required={required}
                    />
                );

            case 'number':
                return (
                    <input
                        type="number"
                        value={value || ''}
                        onChange={(e) => handleChange(parseFloat(e.target.value) || 0)}
                        className="w-full px-3 py-1 border border-gray-300 rounded text-sm focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                        placeholder={placeholder}
                        required={required}
                    />
                );

            case 'currency':
                return (
                    <div className="relative">
                        <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">$</span>
                        <input
                            type="number"
                            value={value || ''}
                            onChange={(e) => handleChange(parseFloat(e.target.value) || 0)}
                            className="w-full pl-8 pr-3 py-1 border border-gray-300 rounded text-sm focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                            placeholder={placeholder}
                            required={required}
                            min="0"
                            step="0.01"
                        />
                    </div>
                );

            case 'date':
                return (
                    <input
                        type="date"
                        value={value || ''}
                        onChange={(e) => handleChange(e.target.value)}
                        className="w-full px-3 py-1 border border-gray-300 rounded text-sm focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                        required={required}
                    />
                );

            case 'email':
                return (
                    <input
                        type="email"
                        value={value || ''}
                        onChange={(e) => handleChange(e.target.value)}
                        className="w-full px-3 py-1 border border-gray-300 rounded text-sm focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                        placeholder={placeholder || "email@example.com"}
                        required={required}
                    />
                );

            case 'phone':
                return (
                    <input
                        type="tel"
                        value={value || ''}
                        onChange={(e) => handleChange(e.target.value)}
                        className="w-full px-3 py-1 border border-gray-300 rounded text-sm focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                        placeholder={placeholder || "(555) 123-4567"}
                        required={required}
                    />
                );

            case 'url':
                return (
                    <input
                        type="url"
                        value={value || ''}
                        onChange={(e) => handleChange(e.target.value)}
                        className="w-full px-3 py-1 border border-gray-300 rounded text-sm focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                        placeholder={placeholder || "https://example.com"}
                        required={required}
                    />
                );

            case 'percentage':
                return (
                    <div className="relative">
                        <input
                            type="number"
                            value={value || ''}
                            onChange={(e) => handleChange(parseFloat(e.target.value) || 0)}
                            className="w-full pr-8 pl-3 py-1 border border-gray-300 rounded text-sm focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                            placeholder={placeholder}
                            required={required}
                            min="0"
                            max="100"
                            step="0.1"
                        />
                        <span className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500">%</span>
                    </div>
                );

            case 'text':
            default:
                return (
                    <input
                        type="text"
                        value={value || ''}
                        onChange={(e) => handleChange(e.target.value)}
                        className="w-full px-3 py-1 border border-gray-300 rounded text-sm focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                        placeholder={placeholder}
                        required={required}
                    />
                );
        }
    };

    return (
        <div className={`py-2 ${span ? 'col-span-2' : ''}`}>
            <div className="text-sm font-medium text-gray-600 mb-1">
                {label}
                {required && <span className="text-red-500 ml-1">*</span>}
            </div>
            {renderInput()}
        </div>
    );
};

export default DetailRow;

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\COMPONENTS\SHARED\MULTISELECTDROPDOWN.JSX CODE IS BELOW
// src/components/shared/MultiSelectDropdown.jsx
// Replace your entire MultiSelectDropdown.jsx file with this:

import React, { useState, useEffect, useRef } from 'react';
import { ChevronDown, X } from 'lucide-react';

const MultiSelectDropdown = ({ 
  options, 
  selectedValues, 
  onChange, 
  placeholder,
  containerWidth // New prop for width control
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef(null);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const handleToggleOption = (value) => {
    const newSelected = selectedValues.includes(value)
      ? selectedValues.filter(v => v !== value)
      : [...selectedValues, value];
    onChange(newSelected);
  };

  const handleClearAll = (e) => {
    e.stopPropagation();
    onChange([]);
  };

  // Enhanced options with "empty" option
  const enhancedOptions = React.useMemo(() => {
    const opts = [...options];
    
    // Add "empty" option at the beginning if not already present
    if (!opts.includes('(empty)')) {
      opts.unshift('(empty)');
    }
    
    return opts;
  }, [options]);

  // Container style for width control
  const containerStyle = containerWidth ? { width: `${containerWidth}px` } : {};

  // Display text for selected values
  const getDisplayText = () => {
    if (selectedValues.length === 0) {
      return placeholder;
    }
    
    if (selectedValues.length === 1) {
      const value = selectedValues[0];
      return value === '(empty)' ? 'Empty/None' : value;
    }
    
    // Handle multiple selections
    const hasEmpty = selectedValues.includes('(empty)');
    const nonEmptyCount = selectedValues.filter(v => v !== '(empty)').length;
    
    if (hasEmpty && nonEmptyCount > 0) {
      return `${selectedValues.length} selected (incl. empty)`;
    } else if (hasEmpty) {
      return 'Empty/None';
    } else {
      return `${selectedValues.length} selected`;
    }
  };

  return (
    <div className="relative" ref={dropdownRef} style={containerStyle}>
      <button
        type="button"
        onClick={() => setIsOpen(!isOpen)}
        className="w-full px-2 py-1 text-xs border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-blue-500 bg-white text-left flex items-center justify-between"
        style={containerStyle}
      >
        <span className="truncate">
          {getDisplayText()}
        </span>
        <div className="flex items-center space-x-1">
          {selectedValues.length > 0 && (
            <button
              onClick={handleClearAll}
              className="p-0.5 hover:bg-gray-200 rounded"
              title="Clear all"
            >
              <X className="w-3 h-3" />
            </button>
          )}
          <ChevronDown className={`w-3 h-3 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
        </div>
      </button>

      {isOpen && (
        <div 
          className="absolute z-50 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg max-h-48 overflow-y-auto"
          style={containerWidth ? { width: `${containerWidth}px` } : {}}
        >
          {enhancedOptions.map((option) => {
            const isEmptyOption = option === '(empty)';
            const isSelected = selectedValues.includes(option);
            
            return (
              <label
                key={option}
                className={`flex items-center px-3 py-2 hover:bg-gray-50 cursor-pointer transition-colors ${
                  isEmptyOption ? 'border-b border-gray-200 bg-gray-25' : ''
                } ${isSelected ? 'bg-blue-50' : ''}`}
              >
                <input
                  type="checkbox"
                  checked={isSelected}
                  onChange={() => handleToggleOption(option)}
                  className="mr-2 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span className={`text-sm ${
                  isEmptyOption ? 'italic text-gray-500 font-medium' : ''
                }`}>
                  {isEmptyOption ? 'Empty/None' : option}
                </span>
                {isEmptyOption && (
                  <span className="ml-auto text-xs text-gray-400">
                    (no value)
                  </span>
                )}
              </label>
            );
          })}
          
          {enhancedOptions.length === 1 && enhancedOptions[0] === '(empty)' && (
            <div className="px-3 py-2 text-sm text-gray-500 italic">
              Only empty values found
            </div>
          )}
          
          {enhancedOptions.length === 0 && (
            <div className="px-3 py-2 text-sm text-gray-500">
              No options available
            </div>
          )}
          
          {/* Summary at bottom if multiple selections */}
          {selectedValues.length > 1 && (
            <div className="border-t border-gray-200 px-3 py-2 bg-gray-50">
              <div className="text-xs text-gray-600">
                {selectedValues.length} of {enhancedOptions.length} selected
              </div>
              <div className="text-xs text-gray-500 mt-1">
                {selectedValues.includes('(empty)') && (
                  <span className="inline-block bg-gray-200 rounded px-1 mr-1">
                    Empty
                  </span>
                )}
                {selectedValues.filter(v => v !== '(empty)').slice(0, 3).map(val => (
                  <span key={val} className="inline-block bg-blue-100 rounded px-1 mr-1">
                    {val.length > 8 ? val.substring(0, 8) + '...' : val}
                  </span>
                ))}
                {selectedValues.filter(v => v !== '(empty)').length > 3 && (
                  <span className="text-gray-400">+{selectedValues.filter(v => v !== '(empty)').length - 3} more</span>
                )}
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default MultiSelectDropdown;

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\COMPONENTS\SHARED\RESIZABLEDATATABLE.CSS CODE IS BELOW
// src/components/shared/ResizableDataTable.css:

.resizable-table {
  table-layout: fixed;
}

.resize-handle {
  position: absolute;
  right: 0;
  top: 0;
  bottom: 0;
  width: 8px;
  cursor: col-resize;
  user-select: none;
  margin-right: -4px;
}

.resize-handle:hover {
  background-color: rgba(59, 130, 246, 0.3);
}

.resize-handle.dragging {
  background-color: rgba(59, 130, 246, 0.6);
}

.resize-handle::after {
  content: '';
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  width: 2px;
  height: 20px;
  background-color: currentColor;
  opacity: 0;
  transition: opacity 0.2s;
}

.resize-handle:hover::after {
  opacity: 0.5;
}

.resize-handle.dragging::after {
  opacity: 1;
}

/* Prevent text selection while resizing */
.resizing * {
  user-select: none !important;
}

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\COMPONENTS\SHARED\RESIZABLEDATATABLE.JSX CODE IS BELOW
// src/components/shared/ResizableDataTable.jsx
import React, { useMemo, useState, useRef, useEffect, useCallback } from 'react';
import MultiSelectDropdown from './MultiSelectDropdown';
import './ResizableDataTable.css';

const ResizableDataTable = ({ 
  data, 
  columns, 
  onRowClick, 
  searchTerm, 
  showFilters, 
  columnFilters, 
  onColumnFilterChange,
  tableKey // Used to save different widths for different tables
}) => {
  // State for column widths - load from localStorage
  const [columnWidths, setColumnWidths] = useState(() => {
    const saved = localStorage.getItem(`column-widths-${tableKey}`);
    if (saved) {
      try {
        return JSON.parse(saved);
      } catch (e) {
        console.warn('Failed to parse saved column widths');
      }
    }
    
    // Default widths based on column defaults NOTE: IS THIS PART NEEDED SINCE WE HAVE DEFAULTS BUILT INTO THE INDIVIDUAL TABLE SPECS?
    const defaults = {};
    columns.forEach((col) => {
      defaults[col.key] = col.defaultWidth || 150;
    });
    return defaults;
  });

  // Save to localStorage whenever widths change
  useEffect(() => {
    localStorage.setItem(`column-widths-${tableKey}`, JSON.stringify(columnWidths));
  }, [columnWidths, tableKey]);

  // Update column widths when columns change (handles switching between tables)
  useEffect(() => {
    setColumnWidths(prev => {
      const updated = { ...prev };
      columns.forEach(col => {
        if (!(col.key in updated)) {
          updated[col.key] = col.defaultWidth || 150;
        }
      });
      return updated;
    });
  }, [columns]);

  // Multi-select column configuration
  const multiSelectColumns = {
    'status': true,
    'agesServed': true,
    'governanceModel': true,
    'membershipStatus': true,
    'raceEthnicity': true,
    'role': true,
    'discoveryStatus': true,
    'individualType': true
    };

  // Handle column resize
  const handleColumnResize = useCallback((columnKey, newWidth) => {
    const minWidth = 50; // Minimum column width
    const maxWidth = 500; // Maximum column width
    const clampedWidth = Math.max(minWidth, Math.min(maxWidth, newWidth));
    
    setColumnWidths(prev => ({
      ...prev,
      [columnKey]: clampedWidth
    }));
  }, []);

  // Reset all column widths to defaults NOTE: WHY IS THIS HERE? CAN WE DELETE?
  const resetColumnWidths = () => {
    const defaults = {};
    columns.forEach((col) => {
      defaults[col.key] = col.defaultWidth || 150;
    });
    setColumnWidths(defaults);
  };

  // Auto-fit column to content NOTE: WHY IS THIS HERE? CAN WE DELETE?
  const autoFitColumn = (columnKey) => {
    // This is a simple heuristic - you could make it more sophisticated
    const column = columns.find(col => col.key === columnKey);
    if (!column) return;

    // Calculate based on header length and some sample data
    const headerLength = column.label.length * 8 + 40; // rough estimate
    
    // Check a few sample values to estimate content width
    const sampleValues = data.slice(0, 5).map(item => {
      const value = item[columnKey];
      if (Array.isArray(value)) {
        return value.join(', ');
      }
      return String(value || '');
    });
    
    const maxContentLength = Math.max(...sampleValues.map(v => v.length));
    const contentWidth = maxContentLength * 8 + 40;
    
    const optimalWidth = Math.max(headerLength, contentWidth, 80);
    handleColumnResize(columnKey, Math.min(optimalWidth, 300));
  };

  const getUniqueValues = (columnKey) => { // DOES THIS DO ANYTHING OTHER THAN SEED THE MULTI-SELECT FILTERS? INSTEAD, CAN WE GET THE ITEMS FOR THOSE FILTERS FROM THE AIRTABLECONFIG.JS FILE?
    const values = new Set();
    let hasEmpty = false;

    data.forEach(item => {
        const value = item[columnKey];
        if (Array.isArray(value)) {
        if (value.length === 0) {
            hasEmpty = true;
        } else {
            value.forEach(v => {
            if (v && v !== '') {
                values.add(v);
            } else {
                hasEmpty = true;
            }
            });
        }
        } else if (value && value !== '') {
        values.add(value);
        } else {
        hasEmpty = true;
        }
    });

    const sortedValues = Array.from(values).sort();

    // Don't add (empty) here since MultiSelectDropdown handles it
    return sortedValues;
  };


    // Apply filters and search
    const filteredData = useMemo(() => {
    let result = data;

    // Apply search term filter
    if (searchTerm) {
        result = result.filter(item => 
        Object.values(item).some(value => {
            if (Array.isArray(value)) {
            return value.some(v => v && v.toString().toLowerCase().includes(searchTerm.toLowerCase()));
            }
            return value && value.toString().toLowerCase().includes(searchTerm.toLowerCase());
        })
        );
    }

    // Apply column filters with enhanced empty support
    Object.entries(columnFilters).forEach(([columnKey, filterValue]) => {
        if (filterValue) {
        if (multiSelectColumns[columnKey] && Array.isArray(filterValue) && filterValue.length > 0) {
            // Enhanced multi-select filter logic with empty support
            result = result.filter(item => {
            const itemValue = item[columnKey];
            
            // Check for empty values
            if (filterValue.includes('(empty)')) {
                const isEmpty = !itemValue || 
                            (Array.isArray(itemValue) && itemValue.length === 0) ||
                            itemValue === '' || 
                            itemValue === null || 
                            itemValue === undefined;
                
                if (isEmpty) return true;
            }
            
            // Check for non-empty values
            const nonEmptyFilters = filterValue.filter(f => f !== '(empty)');
            if (nonEmptyFilters.length === 0) return false;
            
            if (Array.isArray(itemValue)) {
                return itemValue.some(val => nonEmptyFilters.includes(val));
            } else {
                return nonEmptyFilters.includes(itemValue);
            }
            });
        } else if (typeof filterValue === 'string' && filterValue.trim()) {
            // Text filter logic
            result = result.filter(item => {
            const itemValue = item[columnKey];
            if (itemValue == null) return false;
            if (Array.isArray(itemValue)) {
                return itemValue.some(val => 
                val && val.toString().toLowerCase().includes(filterValue.toLowerCase())
                );
            }
            return itemValue.toString().toLowerCase().includes(filterValue.toLowerCase());
            });
        }
        }
    });

    return result;
    }, [data, searchTerm, columnFilters]);

  const handleColumnFilterChange = (columnKey, value) => {
    if (onColumnFilterChange) {
      onColumnFilterChange(columnKey, value);
    }
  };

  const renderFilterInput = (col) => {
  if (multiSelectColumns[col.key]) {
    const options = getUniqueValues(col.key);
    const selectedValues = columnFilters[col.key] || [];
    
    return (
      <MultiSelectDropdown
        options={options}
        selectedValues={selectedValues}
        onChange={(values) => handleColumnFilterChange(col.key, values)}
        placeholder={`Filter ${col.label}...`}
      />
    );
  } else {
    return (
      <input
        type="text"
        placeholder={`Filter ${col.label}...`}
        value={columnFilters[col.key] || ''}
        onChange={(e) => handleColumnFilterChange(col.key, e.target.value)}
        className="w-full px-2 py-1 text-xs border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
      />
    );
  }
};

  return (
    <div className="relative">
      <div className="overflow-x-auto border border-gray-200 rounded-lg">
        <table className="min-w-full bg-white">
          <thead className="bg-gray-50">
            <tr>
              {columns.map((col, index) => {
                const width = columnWidths[col.key] || 150; // WHY ARE WE HARD-CODING DEFAULT WIDTHS HERE?
                const isLastColumn = index === columns.length - 1;
                
                return (
                  <th 
                    key={col.key}
                    style={{ width: `${width}px`, minWidth: `${width}px`, maxWidth: `${width}px` }}
                    className="relative bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none"
                  >
                    <div className="flex items-center justify-between px-6 py-3">
                      <span 
                        className="truncate cursor-pointer"
                        onDoubleClick={() => autoFitColumn(col.key)}
                        title={`Double-click to auto-fit "${col.label}"`}
                      >
                        {col.label}
                      </span>
                    </div>
                    
                    {/* Resize handle */}
                    {!isLastColumn && (
                      <ResizeHandle
                        columnKey={col.key}
                        onResize={handleColumnResize}
                        currentWidth={width}
                      />
                    )}
                  </th>
                );
              })}
            </tr>
            
            {/* Filter Row */}
            {showFilters && (
                <tr className="bg-gray-100">
                    {columns.map((col, index) => {
                    const width = columnWidths[col.key] || 150;
                    const isLastColumn = index === columns.length - 1;
                    
                    return (
                        <th 
                        key={`filter-${col.key}`}
                        style={{ width: `${width}px`, minWidth: `${width}px`, maxWidth: `${width}px` }}
                        className="relative px-2 py-2 bg-gray-100"
                        >
                        <div className="w-full">
                            {renderFilterInput(col)}
                        </div>
                        
                        {/* Resize handle for filter row too */}
                        {!isLastColumn && (
                            <div className="absolute right-0 top-0 bottom-0 w-1 bg-transparent" />
                        )}
                        </th>
                    );
                    })}
                </tr>
                )}
          </thead>
          
          <tbody className="bg-white divide-y divide-gray-200">
            {filteredData.map((item) => (
              <tr 
                key={item.id} 
                className="hover:bg-gray-50 cursor-pointer transition-colors"
                onClick={() => onRowClick && onRowClick(item)}
              >
                {columns.map((col) => {
                  const width = columnWidths[col.key] || 150;
                  
                  return (
                    <td 
                      key={col.key}
                      style={{ width: `${width}px`, minWidth: `${width}px`, maxWidth: `${width}px` }}
                      className="px-6 py-4 text-sm text-gray-900"
                    >
                      <div className="truncate" title={item[col.key]}>
                        {col.render ? col.render(item[col.key], item) : item[col.key] || '-'}
                      </div>
                    </td>
                  );
                })}
              </tr>
            ))}
          </tbody>
        </table>
        
        {filteredData.length === 0 && (
          <div className="text-center py-8 text-gray-500">
            No results found. Try adjusting your filters or search term.
          </div>
        )}
      </div>
    </div>
  );
};

// Resize handle component
const ResizeHandle = ({ columnKey, onResize, currentWidth }) => {
  const [isResizing, setIsResizing] = useState(false);
  const [isDragging, setIsDragging] = useState(false);
  const startX = useRef(0);
  const startWidth = useRef(0);

  const handleMouseDown = useCallback((e) => {
    e.preventDefault();
    e.stopPropagation();
    
    setIsResizing(true);
    setIsDragging(true);
    startX.current = e.clientX;
    startWidth.current = currentWidth;
    
    // Add a class to body to prevent text selection while dragging
    document.body.style.userSelect = 'none';
    document.body.style.cursor = 'col-resize';
  }, [currentWidth]);

  useEffect(() => {
    const handleMouseMove = (e) => {
      if (!isResizing) return;
      
      const deltaX = e.clientX - startX.current;
      const newWidth = startWidth.current + deltaX;
      
      onResize(columnKey, newWidth);
    };

    const handleMouseUp = () => {
      if (isResizing) {
        setIsResizing(false);
        setIsDragging(false);
        
        // Restore body styles
        document.body.style.userSelect = '';
        document.body.style.cursor = '';
      }
    };

    if (isResizing) {
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
      
      // Also handle mouse leave to stop resizing if mouse goes outside window
      document.addEventListener('mouseleave', handleMouseUp);
    }

    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
      document.removeEventListener('mouseleave', handleMouseUp);
    };
  }, [isResizing, columnKey, onResize]);

  return (
    <div
      className={`absolute right-0 top-0 bottom-0 w-2 cursor-col-resize group ${
        isDragging ? 'bg-blue-400' : ''
      }`}
      onMouseDown={handleMouseDown}
      style={{ marginRight: '-4px' }} // Center the handle on the border
    >
      {/* Visual indicator */}
      <div className={`h-full w-1 ml-0.5 transition-colors ${
        isDragging 
          ? 'bg-blue-500' 
          : 'bg-transparent group-hover:bg-blue-300'
      }`} />
    </div>
  );
};

export default ResizableDataTable;

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\COMPONENTS\SHARED\STATUSBADGE.JSX CODE IS BELOW
// src/components/shared/StatusBadge.jsx
import React from 'react';

const StatusBadge = ({ status }) => {
  const getStatusColor = () => {
    switch (status) {
      case 'Open': return 'bg-green-100 text-green-800';
      case 'Emerging': return 'bg-yellow-100 text-yellow-800';
      case 'Member School': return 'bg-blue-100 text-blue-800';
      case 'Complete': return 'bg-green-100 text-green-800';
      case 'Completed': return 'bg-green-100 text-green-800';
      case 'Applying': return 'bg-orange-100 text-orange-800';
      case 'Active': return 'bg-green-100 text-green-800';
      case 'Attended': return 'bg-green-100 text-green-800';
      case 'Registered': return 'bg-blue-100 text-blue-800';
      case 'Scheduled': return 'bg-yellow-100 text-yellow-800';
      case 'No Show': return 'bg-red-100 text-red-800';
      case 'Incomplete': return 'bg-yellow-100 text-yellow-800';
      case 'Issued': return 'bg-green-100 text-green-800';
      case 'Planned': return 'bg-blue-100 text-blue-800';
      case 'Paid Off': return 'bg-green-100 text-green-800';
      case 'Interest Only Period': return 'bg-yellow-100 text-yellow-800';
      case 'Principal Repayment': return 'bg-blue-100 text-blue-800';
      case 'In Progress': return 'bg-yellow-100 text-yellow-800';
      case 'Not Started': return 'bg-gray-100 text-gray-800';
      case 'Permanently Closed': return 'bg-red-100 text-red-800';
      case 'Disaffiliated': return 'bg-red-100 text-red-800';
      case 'Disaffiliating': return 'bg-orange-100 text-orange-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor()}`}>
      {status}
    </span>
  );
};

export default StatusBadge;

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\COMPONENTS\SHARED\TABCONTAINER.JSX CODE IS BELOW
import React from 'react';
import { ArrowLeft } from 'lucide-react';

const TabContainer = ({ title, tabs, activeTab, onTabChange, onBack, children }) => {
    return (
        <div className="h-full flex flex-col bg-white">
            <div className="border-b bg-gray-50 px-6 py-4">
                <div className="flex items-center mb-4">
                    <button
                        onClick={onBack}
                        className="mr-4 p-2 hover:bg-gray-200 rounded-lg transition-colors"
                    >
                        <ArrowLeft className="w-5 h-5" />
                    </button>
                    <h1 className="text-2xl font-bold text-gray-900">{title}</h1>
                </div>

                <div className="flex space-x-8 overflow-x-auto">
                    {tabs.map((tab) => (
                        <button
                            key={tab.id}
                            onClick={() => onTabChange(tab.id)}
                            className={`whitespace-nowrap pb-2 px-1 border-b-2 font-medium text-sm transition-colors ${activeTab === tab.id
                                    ? 'border-blue-500 text-blue-600'
                                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                                }`}
                        >
                            {tab.label}
                        </button>
                    ))}
                </div>
            </div>

            <div className="flex-1 overflow-y-auto p-6">
                {children}
            </div>
        </div>
    );
};

export default TabContainer;

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\COMPONENTS\WILDFLOWERDATABASE.JSX CODE IS BELOW
﻿import React, { useState, useEffect } from 'react';
import { Search, Filter, Plus } from 'lucide-react';

// Import components
import ResizableDataTable from './shared/ResizableDataTable'; // CAN WE DELETE THE PLAIN DATATABLE.JS FILE?
import SchoolDetails from './schools/SchoolDetails';
import EducatorDetails from './educators/EducatorDetails';
import CharterDetails from './charters/CharterDetails';

// Import hooks
import useUnifiedData from '../hooks/useUnifiedData';
import { useNavigation } from '../hooks/useNavigation';
import { useFilters } from '../hooks/useFilters';
import { useSchoolFilters } from '../hooks/useSchoolFilters';
import { useTableColumns } from '../hooks/useTableColumns';
import { useTabCounts } from '../hooks/useTabCounts';
import { useEducatorFilters } from '../hooks/useEducatorFilters';

// Import constants
import { TABS } from '../utils/constants.js';

const WildflowerDatabase = () => {
    const [mainTab, setMainTab] = useState(TABS.SCHOOLS);

    // Navigation
    const { selectedItem, navigateToItem, navigateBack, navigateToEducator } = useNavigation();

    // Filters
    const {
        searchTerm,
        setSearchTerm,
        showFilters,
        setShowFilters,
        columnFilters,
        handleColumnFilterChange,
        clearAllFilters,
        hasActiveFilters
    } = useFilters();

    // Data fetching - get all data first, then filter
    const schoolsResult = useUnifiedData(TABS.SCHOOLS, { includeInactive: true });
    const educatorsResult = useUnifiedData(TABS.EDUCATORS, { includeInactive: true });
    const chartersResult = useUnifiedData(TABS.CHARTERS);

    // Apply filters to the data
    const { includeInactiveSchools, setIncludeInactiveSchools, filteredSchools } = useSchoolFilters(schoolsResult.data);
    const { includeInactiveEducators, setIncludeInactiveEducators, filteredEducators } = useEducatorFilters(educatorsResult.data);
    // Add this temporary test after your hooks
    useEffect(() => {
        const testEducatorsAPI = async () => {
            try {
                console.log('🧪 Testing Educators API directly...');
                const { airtableService } = await import('../airtableService.jsx');
                const allEducators = await airtableService.fetchEducators(true);
                console.log('🧪 Direct API call result:', allEducators.length, 'educators');
            } catch (error) {
                console.error('🧪 Direct API test failed:', error);
            }
        };

        testEducatorsAPI();
    }, []); // Run once on mount


    // Get current data based on active tab
    const getCurrentData = () => {
        switch (mainTab) {
            case TABS.SCHOOLS:
                return filteredSchools || [];
            case TABS.EDUCATORS:
                return filteredEducators || [];
            case TABS.CHARTERS:
                return chartersResult.data || [];
            default:
                return [];
        }
    };

    // Table columns
    const columns = useTableColumns(mainTab);

    // Tab counts
    const mainTabs = useTabCounts(
        filteredSchools || [],
        schoolsResult.loading,
        filteredEducators || [],
        chartersResult.data || [],
        includeInactiveSchools
    );

    // Event handlers
    const handleRowClick = (item) => {
        console.log('Row clicked, item:', item);
        navigateToItem(mainTab, item);
    };

    const handleEducatorOpen = (educatorId) => {
        navigateToEducator(educatorId, educatorsResult.data);
    };

    // Show loading state
    if (educatorsResult.loading && mainTab === TABS.EDUCATORS) {
        return (
            <div className="h-screen flex items-center justify-center">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
                    <p className="text-gray-600">Loading educators data...</p>
                </div>
            </div>
        );
    }

    // Show error state
    if (educatorsResult.error && mainTab === TABS.EDUCATORS) {
        return (
            <div className="h-screen flex items-center justify-center">
                <div className="text-center">
                    <p className="text-red-600 mb-4">Error loading educators data</p>
                    <p className="text-gray-600">{educatorsResult.error.message}</p>
                </div>
            </div>
        );
    }

    // If viewing details, render the appropriate detail component
    if (selectedItem) {
        switch (selectedItem.type) {
            case TABS.SCHOOLS:
                return <SchoolDetails school={selectedItem.data} onBack={navigateBack} onEducatorOpen={handleEducatorOpen} />;
            case TABS.EDUCATORS:
                return <EducatorDetails educator={selectedItem.data} onBack={navigateBack} />;
            case TABS.CHARTERS:
                return <CharterDetails charter={selectedItem.data} onBack={navigateBack} />;
            default:
                return null;
        }
    }

    return (
        <div className="h-screen flex flex-col bg-gray-50">
            {/* Header with title and main tabs */}
            <div className="bg-white shadow-sm border-b">
                <div className="w-full px-6 lg:px-8 xl:px-12">
                    <div className="flex items-center justify-between py-4">
                        <div>
                            <h1 className="text-2xl font-bold text-gray-900">Wildflower Schools Database</h1>
                            <p className="text-gray-600">Manage schools, educators, and network data</p>
                        </div>

                        {/* Main tabs */}
                        <div className="flex space-x-8">
                            {mainTabs.map((tab) => (
                                <button
                                    key={tab.id}
                                    onClick={() => setMainTab(tab.id)}
                                    className={`py-2 px-4 rounded-lg font-medium text-sm transition-colors ${mainTab === tab.id
                                            ? 'bg-blue-100 text-blue-700'
                                            : 'text-gray-500 hover:text-gray-700 hover:bg-gray-100'
                                        }`}
                                >
                                    {tab.label} ({tab.count})
                                </button>
                            ))}
                        </div>
                    </div>
                </div>
            </div>

            {/* Main content area */}
            <div className="flex-1 overflow-hidden">
                <div className="w-full px-6 lg:px-8 xl:px-12">
                    <div className="bg-white rounded-lg shadow h-full flex flex-col">
                        {/* Controls bar */}
                        <div className="p-6 border-b">
                            <div className="flex items-center justify-between">
                                <div>
                                    {/* Left side - empty for now */}
                                </div>
                                <div className="flex items-center space-x-4">
                                    {/* Status Filter Toggle */}
                                    {mainTab === TABS.SCHOOLS && (
                                        <label className="flex items-center space-x-2 text-sm">
                                            <input
                                                type="checkbox"
                                                checked={includeInactiveSchools}
                                                onChange={(e) => setIncludeInactiveSchools(e.target.checked)}
                                                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                                            />
                                            <span className="text-gray-700">Include inactive schools</span>
                                        </label>
                                    )}

                                    {mainTab === TABS.EDUCATORS && (
                                        <label className="flex items-center space-x-2 text-sm">
                                            <input
                                                type="checkbox"
                                                checked={includeInactiveEducators}
                                                onChange={(e) => setIncludeInactiveEducators(e.target.checked)}
                                                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                                            />
                                            <span className="text-gray-700">Include inactive educators</span>
                                        </label>
                                    )}

                                    <div className="flex items-center space-x-2">
                                        <button
                                            onClick={() => setShowFilters(!showFilters)}
                                            className={`p-2 transition-colors ${showFilters
                                                    ? 'text-blue-600 bg-blue-50'
                                                    : 'text-gray-400 hover:text-gray-600'
                                                }`}
                                        >
                                            <Filter className="w-4 h-4" />
                                        </button>

                                        {(showFilters && hasActiveFilters) && (
                                            <button
                                                onClick={clearAllFilters}
                                                className="text-xs text-gray-500 hover:text-gray-700 underline"
                                            >
                                                Clear filters
                                            </button>
                                        )}
                                    </div>

                                    <div className="relative">
                                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                                        <input
                                            type="text"
                                            placeholder="Search..."
                                            className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent w-64"
                                            value={searchTerm}
                                            onChange={(e) => setSearchTerm(e.target.value)}
                                        />
                                    </div>

                                    <button className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center">
                                        <Plus className="w-4 h-4 mr-2" />
                                        Add
                                    </button>
                                </div>
                            </div>
                        </div>

                        {/* Data table */}
                        <div className="flex-1 overflow-auto">
                            <ResizableDataTable 
                            data={getCurrentData()}
                            columns={columns}
                            onRowClick={handleRowClick}
                            searchTerm={searchTerm}
                            showFilters={showFilters}
                            columnFilters={columnFilters}
                            onColumnFilterChange={handleColumnFilterChange}
                            tableKey={mainTab} // This saves different widths for schools vs educators vs charters
                            />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default WildflowerDatabase;

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\CREATEEDUCATORMODAL.JSX CODE IS BELOW
import React, { useState } from 'react';
import { X } from 'lucide-react';
import { EDUCATOR_ROLES } from './utils/constants.js';

const CreateEducatorModal = ({ isOpen, onClose, onSubmit, schoolId }) => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    role: '',
    discoveryStatus: 'Not Started',
    montessoriCertified: false,
    pronouns: '',
    phone: '',
    currentSchool: ''
  });

  const [schoolAssignment, setSchoolAssignment] = useState({
    roles: [],
    startDate: new Date().toISOString().split('T')[0],
    currentlyActive: true
  });

  const roleOptions = EDUCATOR_ROLES;

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSchoolAssignmentChange = (field, value) => {
    setSchoolAssignment(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const toggleRole = (role) => {
    setSchoolAssignment(prev => ({
      ...prev,
      roles: prev.roles.includes(role)
        ? prev.roles.filter(r => r !== role)
        : [...prev.roles, role]
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!formData.firstName || !formData.lastName || !formData.email || schoolAssignment.roles.length === 0) {
      return;
    }

    const newEducatorId = `ed_${Date.now()}`;
    
    const newEducator = {
      id: newEducatorId,
      ...formData
    };

    const schoolStint = {
      educatorId: newEducatorId,
      schoolId: schoolId,
      startDate: schoolAssignment.startDate,
      endDate: null,
      currentlyActive: schoolAssignment.currentlyActive,
      roles: schoolAssignment.roles,
      educatorName: `${formData.firstName} ${formData.lastName}`
    };

    onSubmit({ educator: newEducator, stint: schoolStint });
    handleClose();
  };

  const handleClose = () => {
    setFormData({
      firstName: '',
      lastName: '',
      email: '',
      role: '',
      discoveryStatus: 'Not Started',
      montessoriCertified: false,
      pronouns: '',
      phone: '',
      currentSchool: ''
    });
    setSchoolAssignment({
      roles: [],
      startDate: new Date().toISOString().split('T')[0],
      currentlyActive: true
    });
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold">Create New Educator</h3>
          <button onClick={handleClose} className="text-gray-400 hover:text-gray-600">
            <X className="w-5 h-5" />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Basic Information */}
          <div>
            <h4 className="text-md font-medium text-gray-900 mb-3">Basic Information</h4>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  First Name *
                </label>
                <input
                  type="text"
                  value={formData.firstName}
                  onChange={(e) => handleInputChange('firstName', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Last Name *
                </label>
                <input
                  type="text"
                  value={formData.lastName}
                  onChange={(e) => handleInputChange('lastName', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Email *
                </label>
                <input
                  type="email"
                  value={formData.email}
                  onChange={(e) => handleInputChange('email', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Phone
                </label>
                <input
                  type="tel"
                  value={formData.phone}
                  onChange={(e) => handleInputChange('phone', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Pronouns
                </label>
                <input
                  type="text"
                  value={formData.pronouns}
                  onChange={(e) => handleInputChange('pronouns', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="e.g., she/her, they/them"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Discovery Status
                </label>
                <select
                  value={formData.discoveryStatus}
                  onChange={(e) => handleInputChange('discoveryStatus', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="Not Started">Not Started</option>
                  <option value="In Progress">In Progress</option>
                  <option value="Complete">Complete</option>
                </select>
              </div>
            </div>
            
            <div className="mt-4">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={formData.montessoriCertified}
                  onChange={(e) => handleInputChange('montessoriCertified', e.target.checked)}
                  className="mr-2 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span className="text-sm font-medium text-gray-700">Montessori Certified</span>
              </label>
            </div>
          </div>

          {/* School Assignment */}
          <div className="border-t pt-4">
            <h4 className="text-md font-medium text-gray-900 mb-3">School Assignment</h4>
            
            <div className="grid grid-cols-2 gap-4 mb-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Start Date
                </label>
                <input
                  type="date"
                  value={schoolAssignment.startDate}
                  onChange={(e) => handleSchoolAssignmentChange('startDate', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  required
                />
              </div>
              <div className="flex items-end">
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={schoolAssignment.currentlyActive}
                    onChange={(e) => handleSchoolAssignmentChange('currentlyActive', e.target.checked)}
                    className="mr-2 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span className="text-sm font-medium text-gray-700">Currently Active</span>
                </label>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Roles (select at least one) *
              </label>
              <div className="grid grid-cols-2 gap-2">
                {roleOptions.map(role => (
                  <label key={role} className="flex items-center">
                    <input
                      type="checkbox"
                      checked={schoolAssignment.roles.includes(role)}
                      onChange={() => toggleRole(role)}
                      className="mr-2 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <span className="text-sm">{role}</span>
                  </label>
                ))}
              </div>
            </div>
          </div>

          <div className="flex space-x-3 pt-4 border-t">
            <button
              type="button"
              onClick={handleClose}
              className="flex-1 px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={!formData.firstName || !formData.lastName || !formData.email || schoolAssignment.roles.length === 0}
              className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed"
            >
              Create Educator & Add to School
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default CreateEducatorModal;

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\DATA\SAMPLEDATA.JSX CODE IS BELOW
// src/data/sampleData.jsx

export const sampleSchools = [
  {
    id: 'rec1',
    name: 'Yellow Rose Montessori',
    shortName: 'Yellow Rose',
    status: 'Emerging',
    governanceModel: 'Independent',
    agesServed: ['Primary'],
    location: 'Austin, TX',
    membershipStatus: 'Member School',
    founders: ['Ashten Sommer', 'Gabrielle Tyree'],
    phone: null,
    website: 'https://www.yellowrosemontessori.org/',
    emailDomain: 'yellowrosemontessori.org',
    pod: 'TX Pod',
    ein: '99-2818038',
    legalName: 'Yellow Rose Montessori',
    incorporationDate: '4/9/2024',
    nonprofitStatus: 'group exemption',
    groupExemptionStatus: 'Active',
    dateReceivedGroupExemption: '5/30/2024',
    currentFYEnd: '6/30',
    nondiscriminationOnApplication: true,
    nondiscriminationOnWebsite: true,
    guidestarRequested: true,
    flexibleTuitionModel: false,
    activePodMember: 'Yes, regular attendee/role holder',
    membershipAgreementDate: '5/28/2024',
    // SSJ/OSS Data
    ssjStage: 'Startup',
    ssjTargetCity: 'Houston',
    ssjTargetState: 'TX',
    ssjOriginalProjectedOpenDate: '9/10/2024, 12:00 AM',
    ssjProjOpenSchoolYear: '2027',
    ssjProjectedOpen: '9/1/2026, 12:00 AM',
    riskFactors: '-',
    watchlist: '-',
    ssjBoardDevelopment: 'Board is forming, 1-2 mtgs',
    ssjCohortStatus: '-',
    enteredVisioningDate: '1/9/2024, 12:00 AM',
    cohorts: '-',
    visioningAlbumComplete: '-',
    ssjHasETLPartner: 'No partner',
    ssjOpsGuideTrack: '1:1 Support',
    enteredPlanningDate: '3/14/2024, 12:00 AM',
    planningAlbum: '-',
    ssjReadinessRating: 'Low',
    ssjTool: 'My Wildflower - Sensible Default',
    enteredStartupDate: '5/28/2024, 12:00 AM',
    logoDesigner: 'internal design',
    trademarkFiled: '-',
    nameSelectionProposal: '-',
    ssjNameReserved: 'reserved',
    ssjFacility: 'Searching, intending to rent',
    building4GoodFirm: '-',
    ssjBuilding4GoodStatus: '-',
    ssjDateSharedN4G: '-',
    ssjAmountRaised: '-',
    ssjGapInFunding: '-',
    ssjLoanApprovedAmt: '-',
    ssjLoanEligibility: '-',
    ssjTotalStartupFunding: '$200,000',
    ssjViablePathway: 'Maybe, prospects identified but not secured',
    ssjFundraisingNarrative: 'Biggest barrier is finding a facility. Funding gap is complicated, without a facility.',
    ssjInternalFunding: 'Yes, loan',
    ssjBudgetStage: '-',
    ssjEnrollmentTrack: '-',
    ssjNextDecision: 'Pre-program office with Daniela, Maya and team for Powell app',
    // Systems
    googleVoice: '-',
    budgetUtility: '-',
    admissionsSystem: 'TC',
    billComAccount: '-',
    bookkeeper: '-',
    businessInsurance: '-',
    tcRecordkeeping: '-',
    tcAdmissions: '-',
    qbo: 'internal license - active',
    tcSchoolId: '-',
    websiteTool: 'Wix v2',
    // Additional fields for summary
    currentTLs: ['Ashten Sommer', 'Gabrielle Tyree'],
    schoolOpenDate: null,
    programFocus: 'Nature-based Montessori',
    maxCapacityEnrollments: 60,
    numberOfClassrooms: 3,
    publicFunding: false,
    schoolCalendar: 'Year-round',
    schoolSchedule: 'Extended Day (7:30 AM - 6:00 PM)',
    // Membership fields
    signedMembershipAgreementDate: '5/28/2024',
    signedMembershipAgreement: 'https://example.com/yellow-rose-agreement.pdf',
    agreementVersion: 'v3.0',
    // Contact info
    schoolEmail: 'info@yellowrosemontessori.org',
    facebook: 'https://facebook.com/yellowrosemontessori',
    instagram: '@yellowrosemontessori',
    // Legal entity
    legalStructure: '501(c)(3) Nonprofit Corporation',
    institutionalPartner: null,
    dateWithdrawnFromGroupExemption: null,
    loanReportName: 'Yellow Rose Montessori Inc.',
    // Closed school fields (not applicable for Yellow Rose)
    leftNetworkDate: null,
    leftNetworkReason: null,
    membershipTerminationLetter: null
  },
  {
    id: 'rec2',
    name: 'Wildflower Montessori School Boston',
    shortName: 'WF Boston',
    status: 'Open',
    governanceModel: 'Independent',
    agesServed: ['Primary', 'Lower Elementary'],
    location: 'Boston, MA',
    membershipStatus: 'Member School',
    phone: '(617) 555-0123',
    website: 'https://boston.wildflowerschools.org',
    pod: 'Mass: Broadway',
    opened: null,
    founders: ['Sarah Johnson'],
    // Additional fields for summary
    currentTLs: ['Sarah Johnson'],
    programFocus: 'Traditional Montessori',
    maxCapacityEnrollments: 120,
    numberOfClassrooms: 6,
    publicFunding: false,
    flexibleTuition: true,
    schoolCalendar: 'Traditional School Year',
    schoolSchedule: 'Full Day (8:30 AM - 3:30 PM)',
    // Membership fields
    signedMembershipAgreementDate: '2018-06-15',
    signedMembershipAgreement: 'https://example.com/wf-boston-agreement.pdf',
    agreementVersion: 'v2.1',
    // Contact info
    schoolEmail: 'info@bostonwildflower.org',
    facebook: 'https://facebook.com/wildflowerboston',
    instagram: '@wildflowerboston',
    // Legal entity
    legalStructure: '501(c)(3) Nonprofit Corporation',
    institutionalPartner: null,
    dateWithdrawnFromGroupExemption: null,
    loanReportName: 'Wildflower Montessori School Boston Inc.'
  }
];

export const sampleEducators = [
  {
    id: 'ed1',
    firstName: 'Ashten',
    lastName: 'Sommer',
    email: 'ashten@yellowrosemontessori.org',
    currentSchool: 'Yellow Rose',
    role: 'Founder',
    discoveryStatus: 'Complete',
    montessoriCertified: true,
    pronouns: 'she/her/hers',
    phone: '(512) 555-0123',
    // Demographics
    raceEthnicity: ['White', 'Hispanic, Latino, or Spanish Origin'],
    gender: 'Female/Woman',
    householdIncome: 'Upper Income',
    lgbtqia: false,
    primaryLanguage: 'English',
    otherLanguages: ['Spanish'],
    // Contact Info
    personalEmail: 'ashten.sommer@gmail.com',
    wildflowerEmail: 'ashten@yellowrosemontessori.org',
    workEmail: null,
    primaryPhone: '(512) 555-0123',
    secondaryPhone: null,
    homeAddress: '1234 Oak Street, Austin, TX 78704'
  },
  {
    id: 'ed2',
    firstName: 'Gabrielle',
    lastName: 'Tyree',
    email: 'gabrielle@yellowrosemontessori.org',
    currentSchool: 'Yellow Rose',
    role: 'Founder',
    discoveryStatus: 'Complete',
    montessoriCertified: true,
    pronouns: 'they/them',
    phone: '(512) 555-0456',
    // Demographics
    raceEthnicity: ['African-American'],
    gender: 'Non-binary',
    householdIncome: 'Middle Income',
    lgbtqia: true,
    primaryLanguage: 'English',
    otherLanguages: [],
    // Contact Info
    personalEmail: 'gabrielle.tyree@gmail.com',
    wildflowerEmail: 'gabrielle@yellowrosemontessori.org',
    workEmail: null,
    primaryPhone: '(512) 555-0456',
    secondaryPhone: '(512) 555-0789',
    homeAddress: '5678 Elm Avenue, Austin, TX 78745'
  }
];

export const sampleCharters = [
  {
    id: 'ch1',
    name: 'Denver Charter Network',
    shortName: 'Denver Charter',
    status: 'Applying',
    initialTargetCommunity: 'Denver Metro'
  }
];

export const sampleSSJFilloutForms = [
  {
    id: 'ssj1',
    educatorId: 'ed1',
    firstName: 'Ashten',
    lastName: 'Sommer',
    entryDate: '2022-11-15',
    location: 'Austin, TX',
    routedTo: 'daniela.vasan@wildflowerschools.org',
    sendGridSentData: '2022-11-15 10:30 AM',
    assignedPartner: 'Daniela Vasan',
    assignedPartnerOverride: null,
    oneOnOneStatus: 'Completed',
    personResponsibleForFollowUp: 'Rachel Kelley-Cohen'
  },
  {
    id: 'ssj2',
    educatorId: 'ed2',
    firstName: 'Gabrielle',
    lastName: 'Tyree',
    entryDate: '2022-12-03',
    location: 'Austin, TX',
    routedTo: 'daniela.vasan@wildflowerschools.org',
    sendGridSentData: '2022-12-03 2:15 PM',
    assignedPartner: 'Daniela Vasan',
    assignedPartnerOverride: null,
    oneOnOneStatus: 'Scheduled',
    personResponsibleForFollowUp: 'Daniela Vasan'
  }
];

export const sampleEventAttendance = [
  {
    id: 'ea1',
    educatorId: 'ed1',
    eventName: 'Wildflower Summer Institute 2023',
    eventDate: '2023-07-15',
    registrationStatus: 'Registered',
    attendanceStatus: 'Attended',
    location: 'Austin, TX'
  },
  {
    id: 'ea2',
    educatorId: 'ed1',
    eventName: 'Regional Gathering - Texas',
    eventDate: '2023-10-08',
    registrationStatus: 'Registered',
    attendanceStatus: 'Attended',
    location: 'Dallas, TX'
  },
  {
    id: 'ea3',
    educatorId: 'ed2',
    eventName: 'Wildflower Summer Institute 2023',
    eventDate: '2023-07-15',
    registrationStatus: 'Registered',
    attendanceStatus: 'No Show',
    location: 'Austin, TX'
  }
];

export const sampleMontessoriCerts = [
  {
    id: 'mc1',
    educatorId: 'ed1',
    certificationLevel: 'Primary (3-6)',
    certifier: 'AMI',
    year: 2020,
    status: 'Active'
  },
  {
    id: 'mc2',
    educatorId: 'ed2',
    certificationLevel: 'Primary (3-6)',
    certifier: 'AMS',
    year: 2019,
    status: 'Active'
  }
];

export const sampleEducatorNotes = [
  {
    id: 'en1',
    educatorId: 'ed1',
    noteText: 'Ashten has shown exceptional leadership during the school startup process. Strong vision for authentic Montessori implementation.',
    createdBy: 'Rachel Kelley-Cohen',
    createdDate: '2023-06-15',
    isPrivate: false
  },
  {
    id: 'en2',
    educatorId: 'ed1',
    noteText: 'Confidential: Expressed concerns about funding timeline and facility search challenges.',
    createdBy: 'Daniela Vasan',
    createdDate: '2023-08-22',
    isPrivate: true
  },
  {
    id: 'en3',
    educatorId: 'ed2',
    noteText: 'Gabrielle brings valuable equity perspective to leadership team. Excellent at community outreach.',
    createdBy: 'Rachel Kelley-Cohen',
    createdDate: '2023-06-15',
    isPrivate: false
  }
];

export const sampleSchoolNotes = [
  {
    id: 'sn1',
    schoolId: 'rec1',
    noteText: 'Initial founder meeting went very well. Strong vision for authentic Montessori implementation with focus on outdoor learning components.',
    createdBy: 'Rachel Kelley-Cohen',
    createdDate: '2023-02-15',
    isPrivate: false
  },
  {
    id: 'sn2',
    schoolId: 'rec1',
    noteText: 'Facility search proving challenging in Austin market. May need to consider alternative locations or modify timeline.',
    createdBy: 'Daniela Vasan',
    createdDate: '2023-07-08',
    isPrivate: false
  },
  {
    id: 'sn3',
    schoolId: 'rec1',
    noteText: 'Confidential: Board concerns about fundraising timeline and potential delays due to permit issues.',
    createdBy: 'Rachel Kelley-Cohen',
    createdDate: '2023-09-12',
    isPrivate: true
  },
  {
    id: 'sn4',
    schoolId: 'rec2',
    noteText: 'Celebrating 5 years of successful operation! School has exceeded enrollment targets and maintains excellent parent satisfaction scores.',
    createdBy: 'Sara Hernandez',
    createdDate: '2023-09-01',
    isPrivate: false
  },
  {
    id: 'sn5',
    schoolId: 'rec2',
    noteText: 'Exploring expansion opportunities. Sarah Johnson has expressed interest in opening a second location in Cambridge.',
    createdBy: 'Sara Hernandez',
    createdDate: '2023-10-15',
    isPrivate: false
  }
];

export const sampleActionSteps = [
  {
    id: 'as1',
    schoolId: 'rec1',
    item: 'Complete facility lease review with Building4Good attorney',
    assignee: 'Ashten Sommer',
    status: 'Incomplete',
    dueDate: '2023-12-01'
  },
  {
    id: 'as2',
    schoolId: 'rec1',
    item: 'Finalize enrollment projections for Year 1',
    assignee: 'Gabrielle Tyree',
    status: 'Complete',
    dueDate: '2023-10-15'
  },
  {
    id: 'as3',
    schoolId: 'rec1',
    item: 'Schedule Building4Good consultation for facility modifications',
    assignee: 'Rachel Kelley-Cohen',
    status: 'Incomplete',
    dueDate: '2023-11-30'
  },
  {
    id: 'as4',
    schoolId: 'rec2',
    item: 'Submit annual compliance report to state department',
    assignee: 'Sarah Johnson',
    status: 'Complete',
    dueDate: '2023-09-30'
  },
  {
    id: 'as5',
    schoolId: 'rec2',
    item: 'Develop expansion classroom timeline and budget',
    assignee: 'Sarah Johnson',
    status: 'Incomplete',
    dueDate: '2023-12-15'
  }
];

export const sampleMembershipFeeRecords = [
  {
    id: 'mfr1',
    schoolId: 'rec1',
    schoolYear: '2023-2024',
    initialFee: 5000,
    revisedAmount: 4500,
    amountPaid: 2000,
    amountReceivable: 2500,
    exemptionStatus: 'Non-exempt',
    revenue: 125000,
    nthYear: 1,
    historyStatus: 'Emerging'
  },
  {
    id: 'mfr2',
    schoolId: 'rec1',
    schoolYear: '2024-2025',
    initialFee: 6000,
    revisedAmount: 6000,
    amountPaid: 1500,
    amountReceivable: 4500,
    exemptionStatus: 'Non-exempt',
    revenue: 150000,
    nthYear: 2,
    historyStatus: 'Open'
  }
];

export const sampleMembershipFeeUpdates = [
  {
    id: 'mfu1',
    schoolId: 'rec1',
    schoolYear: '2023-2024',
    updateType: 'Payment received',
    date: '2023-09-15',
    amountPaid: 1000,
    explanation: 'First installment payment received'
  },
  {
    id: 'mfu2',
    schoolId: 'rec1',
    schoolYear: '2023-2024',
    updateType: 'Change in fee',
    date: '2023-10-01',
    revisedFeeAmount: 4500,
    explanation: 'Fee reduced due to lower than expected enrollment'
  },
  {
    id: 'mfu3',
    schoolId: 'rec1',
    schoolYear: '2024-2025',
    updateType: 'Payment received',
    date: '2024-08-15',
    amountPaid: 1500,
    explanation: 'First payment for 2024-2025 school year'
  }
];

export const sampleEducatorsXSchools = [
  {
    id: 'exs1',
    educatorId: 'ed1',
    schoolId: 'rec1',
    startDate: '2023-01-15',
    endDate: null,
    currentlyActive: true,
    roles: ['Founder', 'Teacher Leader'],
    educatorName: 'Ashten Sommer'
  },
  {
    id: 'exs2',
    educatorId: 'ed2',
    schoolId: 'rec1',
    startDate: '2023-01-15',
    endDate: null,
    currentlyActive: true,
    roles: ['Founder'],
    educatorName: 'Gabrielle Tyree'
  }
];

export const sampleLocations = [
  {
    id: 'loc1',
    schoolId: 'rec1',
    address: '1234 Oak Street, Austin, TX 78704',
    startDate: '2023-01-15',
    endDate: null,
    currentlyActive: true,
    locationType: 'School address and mailing address',
    currentMailingAddress: true,
    currentPhysicalAddress: true
  },
  {
    id: 'loc2',
    schoolId: 'rec2',
    address: '567 Commonwealth Ave, Boston, MA 02215',
    startDate: '2018-09-01',
    endDate: null,
    currentlyActive: true,
    locationType: 'School address and mailing address',
    currentMailingAddress: true,
    currentPhysicalAddress: true
  },
  {
    id: 'loc3',
    schoolId: 'rec2',
    address: '123 Harvard St, Cambridge, MA 02138',
    startDate: '2018-09-01',
    endDate: '2020-06-30',
    currentlyActive: false,
    locationType: 'Former mailing address',
    currentMailingAddress: false,
    currentPhysicalAddress: false
  }
];

export const sampleGovernanceDocs = [
  {
    id: 'gd1',
    schoolId: 'rec1',
    documentType: 'Articles of Incorporation - AOI',
    date: '2023-04-09',
    docLink: 'https://example.com/yellow-rose-aoi.pdf',
    docNotes: 'Filed with Texas Secretary of State'
  },
  {
    id: 'gd2',
    schoolId: 'rec1',
    documentType: 'Bylaws - BYL',
    date: '2023-04-15',
    docLink: 'https://example.com/yellow-rose-bylaws.pdf',
    docNotes: 'Board approved bylaws'
  }
];

export const sampleGuideAssignments = [
  {
    id: 'ga1',
    schoolId: 'rec1',
    guideShortName: 'Rachel K-C',
    role: 'Ops Guide',
    startDate: '2023-01-15',
    endDate: null,
    currentlyActive: true
  },
  {
    id: 'ga2',
    schoolId: 'rec1',
    guideShortName: 'Daniela V',
    role: 'Regional Entrepreneur',
    startDate: '2023-02-01',
    endDate: '2023-12-31',
    currentlyActive: false
  }
];

export const sampleGrants = [
  {
    id: 'gr1',
    schoolId: 'rec1',
    amount: 25000,
    issueDate: '2023-05-15',
    issuedBy: 'Rachel Kelley-Cohen',
    partnerName: 'TWF National',
    status: 'Issued',
    useOfFunds: 'Startup funding for materials and training'
  },
  {
    id: 'gr2',
    schoolId: 'rec1',
    amount: 15000,
    issueDate: '2023-08-01',
    issuedBy: 'Daniela Vasan',
    partnerName: 'TWF Walton',
    status: 'Planned',
    useOfFunds: 'Facility preparation and equipment'
  },
  {
    id: 'gr3',
    schoolId: 'rec2',
    amount: 30000,
    issueDate: '2023-01-10',
    issuedBy: 'Sara Hernandez',
    partnerName: 'TWF Cambridge',
    status: 'Issued',
    useOfFunds: 'Expansion funding for additional classroom'
  },
  {
    id: 'gr4',
    schoolId: 'rec2',
    amount: 12000,
    issueDate: '2023-03-22',
    issuedBy: 'Erika McDowell',
    partnerName: 'COVID Relief Fund',
    status: 'Issued',
    useOfFunds: 'COVID-19 safety measures and technology upgrades'
  }
];

export const sampleLoans = [
  {
    id: 'ln1',
    schoolId: 'rec1',
    amount: 75000,
    issueDate: '2023-09-01',
    maturityDate: '2026-09-01',
    interestRate: 0.03,
    status: 'Interest Only Period',
    useOfProceeds: 'Startup funding for facility and initial operations'
  },
  {
    id: 'ln2',
    schoolId: 'rec2',
    amount: 100000,
    issueDate: '2018-08-15',
    maturityDate: '2023-08-15',
    interestRate: 0.025,
    status: 'Paid Off',
    useOfProceeds: 'Initial school operations and equipment'
  },
  {
    id: 'ln3',
    schoolId: 'rec2',
    amount: 50000,
    issueDate: '2021-06-01',
    maturityDate: '2026-06-01',
    interestRate: 0.035,
    status: 'Principal Repayment',
    useOfProceeds: 'Expansion to second classroom'
  }
];

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\HOOKS\USEAIRTABLEDATA.JSX CODE IS BELOW
import { useState, useEffect, useCallback } from 'react';
import { airtableService } from '../airtableService';


// Generic hook for fetching data
export const useAirtableData = (fetchFunction, dependencies = []) => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchData = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      const result = await fetchFunction();
      setData(result);
    } catch (err) {
      setError(err);
      console.error('Error fetching data:', err);
    } finally {
      setLoading(false);
    }
  }, dependencies);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  const refetch = useCallback(() => {
    fetchData();
  }, [fetchData]);

  return { data, loading, error, refetch };
};

export const useSchools = (includeInactive = false) => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchSchools = async () => {
    try {
      setLoading(true);
      setError(null);
      console.log('🔄 Fetching schools, includeInactive:', includeInactive);
      
      const rawSchools = await airtableService.fetchSchools(includeInactive);
      console.log('✅ Raw schools received:', rawSchools);
      
      setData(rawSchools || []);
      
    } catch (err) {
      console.error('❌ Error fetching schools:', err);
      setError(err);
      setData([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchSchools();
  }, [includeInactive]); // Re-fetch when includeInactive changes

  return { 
    data, 
    loading, 
    error, 
    refetch: fetchSchools 
  };
};

// Hook for fetching educators
export const useEducators = (includeInactive = false) => {
    console.log('🚨 useEducators hook called with includeInactive:', includeInactive);
    const [data, setData] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchAllEducators = async () => {
            setLoading(true);
            setError(null);

            try {

                // Always fetch ALL educators - let React filtering handle the rest
                const educatorsData = await airtableService.fetchEducators(true);

                // Transform the data using the clean email structure
                const transformedEducators = educatorsData.map(educator => {

                    return {
                        id: educator.id,
                        fullName: educator[`Full Name`] || `Unknown`,
                        firstName: educator['First Name'] || '-',
                        lastName: educator['Last Name'] || '-',
                        email: educator['Current Primary Email Address'] || '',
                        emailAddresses: educator['Email Addresses'] || [],
                        phone: educator['Primary phone'] || '',
                        secondaryPhone: educator['Secondary phone'] || '',
                        homeAddress: educator['Home Address'] || '',
                        pronouns: educator['Pronouns'] || '',
                        pronounsOther: educator['Pronouns Other'] || '',
                        nickname: educator['Nickname'] || '',
                        discoveryStatus: educator['Discovery status'] || '',
                        individualType: educator['Individual Type'] || '',
                        montessoriCertified: educator['Montessori Certified'] || false,
                        currentSchool: educator['Currently Active School'] || '',
                        role: educator['Current Role'] || '',
                        raceEthnicity: educator['Race & Ethnicity'] || [],
                        raceEthnicityOther: educator['Race & Ethnicity Other'] || '',
                        gender: educator['Gender'] || '',
                        genderOther: educator['Gender - Other'] || '',
                        householdIncome: educator['Household Income'] || '',
                        incomeBackground: educator['Income Background'] || [],
                        lgbtqia: educator['LGBTQIA'] || '',
                        primaryLanguage: educator['Primary Language'] || '',
                        otherLanguages: educator['Other languages'] || [],
                        targetGeo: educator['Target geo combined'] || '',
                        targetCity: educator['Target city'] || '',
                        targetState: educator['Target state'] || '',
                        targetIntl: educator['Target - international'] || '',
                        holaspirit: educator['Active Holaspirit'] || false,
                        tcUserId: educator['TC User ID'] || '',
                        createdTime: educator['Created'] || educator.createdTime,
                        selfReflection: educator['Self-reflection'] || '',
                        inactiveFlag: educator['Inactive Flag'] || false,
                        currentActiveSchool: educator['Currently Active School'] || '',
                        allSchools: educator['All Schools'] || [],
                        schoolStatuses: educator['School Statuses'] || [],
                        activeSchoolAffiliationStatus: educator['Active School Affiliation Status'] || ''
                    };
                });

                setData(transformedEducators);
            } catch (err) {
                console.error('❌ Error fetching educators:', err);
                setError(err);
            } finally {
                setLoading(false);
            }
        };

        fetchAllEducators();
    }, [includeInactive]);

    return { data, loading, error };
};

// Hook for fetching charters
export const useCharters = () => {
  return useAirtableData(() => airtableService.fetchCharters());
};

// Hook for fetching educator-school relationships
export const useEducatorsXSchools = () => {
  return useAirtableData(() => airtableService.fetchEducatorsXSchools());
};

// Hook for fetching school-specific data
export const useSchoolData = (schoolId) => {
  const [schoolData, setSchoolData] = useState({
    notes: [],
    grants: [],
    loans: [],
    actionSteps: [],
    locations: [],
    membershipFees: [],
    guideAssignments: [],
    governanceDocs: [],
    nineNineties: [],
    familySurveys: [],
    assessmentData: []
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchSchoolData = useCallback(async () => {
    if (!schoolId) return;
    
    try {
      setLoading(true);
      setError(null);
      
      const [
        notes,
        grants,
        loans,
        actionSteps,
        locations,
        membershipFees,
        guideAssignments,
        governanceDocs,
        nineNineties,
        familySurveys,
        assessmentData
      ] = await Promise.all([
        airtableService.fetchSchoolNotes(schoolId),
        airtableService.fetchSchoolGrants(schoolId),
        airtableService.fetchSchoolLoans(schoolId),
        airtableService.fetchSchoolActionSteps(schoolId),
        airtableService.fetchSchoolLocations(schoolId),
        airtableService.fetchSchoolMembershipFees(schoolId),
        airtableService.fetchSchoolGuideAssignments(schoolId),
        airtableService.fetchSchoolGovernanceDocs(schoolId),
        airtableService.fetchSchoolNineNineties(schoolId),
        airtableService.fetchSchoolFamilySurveys(schoolId),
        airtableService.fetchSchoolAssessmentData(schoolId)
      ]);

      setSchoolData({
        notes,
        grants,
        loans,
        actionSteps,
        locations,
        membershipFees,
        guideAssignments,
        governanceDocs,
        nineNineties,
        familySurveys,
        assessmentData
      });
    } catch (err) {
      setError(err);
      console.error('Error fetching school data:', err);
    } finally {
      setLoading(false);
    }
  }, [schoolId]);

  useEffect(() => {
    fetchSchoolData();
  }, [fetchSchoolData]);

  const refetch = useCallback(() => {
    fetchSchoolData();
  }, [fetchSchoolData]);

  return { schoolData, loading, error, refetch };
};

// Hook for fetching educator-specific data
export const useEducatorData = (educatorId) => {
  const [educatorData, setEducatorData] = useState({
    notes: [],
    ssjForms: [],
    eventAttendance: [],
    montessoriCerts: []
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchEducatorData = useCallback(async () => {
    if (!educatorId) return;
    
    try {
      setLoading(true);
      setError(null);
      
      const [
        notes,
        ssjForms,
        eventAttendance,
        montessoriCerts
      ] = await Promise.all([
        airtableService.fetchEducatorNotes(educatorId),
        airtableService.fetchEducatorSSJForms(educatorId),
        airtableService.fetchEducatorEventAttendance(educatorId),
        airtableService.fetchEducatorMontessoriCerts(educatorId)
      ]);

      setEducatorData({
        notes,
        ssjForms,
        eventAttendance,
        montessoriCerts
      });
    } catch (err) {
      setError(err);
      console.error('Error fetching educator data:', err);
    } finally {
      setLoading(false);
    }
  }, [educatorId]);

  useEffect(() => {
    fetchEducatorData();
  }, [fetchEducatorData]);

  const refetch = useCallback(() => {
    fetchEducatorData();
  }, [fetchEducatorData]);

  return { educatorData, loading, error, refetch };
};

// Hook for creating/updating records
export const useAirtableMutations = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const createRecord = useCallback(async (tableName, fields) => {
    try {
      setLoading(true);
      setError(null);
      const result = await airtableService.createRecord(tableName, fields);
      return result;
    } catch (err) {
      setError(err);
      console.error('Error creating record:', err);
      throw err;
    } finally {
      setLoading(false);
    }
  }, []);

  const updateRecord = useCallback(async (tableName, recordId, fields) => {
    try {
      setLoading(true);
      setError(null);
      const result = await airtableService.updateRecord(tableName, recordId, fields);
      return result;
    } catch (err) {
      setError(err);
      console.error('Error updating record:', err);
      throw err;
    } finally {
      setLoading(false);
    }
  }, []);

  const deleteRecord = useCallback(async (tableName, recordId) => {
    try {
      setLoading(true);
      setError(null);
      const result = await airtableService.deleteRecord(tableName, recordId);
      return result;
    } catch (err) {
      setError(err);
      console.error('Error deleting record:', err);
      throw err;
    } finally {
      setLoading(false);
    }
  }, []);

  return {
    createRecord,
    updateRecord,
    deleteRecord,
    loading,
    error
  };
};

// Hook for managing search and filtering
export const useDataFiltering = (data, searchTerm) => {
  const [filteredData, setFilteredData] = useState(data);

  useEffect(() => {
    if (!searchTerm || !data) {
      setFilteredData(data);
      return;
    }

    const filtered = data.filter(item => {
      const searchableFields = Object.values(item).join(' ').toLowerCase();
      return searchableFields.includes(searchTerm.toLowerCase());
    });

    setFilteredData(filtered);
  }, [data, searchTerm]);

  return filteredData;
};

// Replace your useSchoolLocations hook in useAirtableData.jsx with this fixed version:

export const useSchoolLocations = (schoolId) => {
  console.log('🚨 useSchoolLocations (REAL) hook called with schoolId:', schoolId);
  
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    console.log('🚨 useSchoolLocations useEffect triggered for schoolId:', schoolId);
    
    const fetchLocations = async () => {
      console.log('🚨 fetchLocations function called for schoolId:', schoolId);
      
      if (!schoolId) {
        console.log('⚠️ No schoolId provided to fetchLocations');
        setLoading(false);
        return;
      }
      
      try {
        console.log('🔄 Starting fetchLocations for schoolId:', schoolId);
        setLoading(true);
        setError(null);
        
        console.log('🔄 About to call airtableService.fetchSchoolLocations...');
        const locations = await airtableService.fetchSchoolLocations(schoolId);
        console.log('✅ fetchSchoolLocations returned:', locations);
        console.log('✅ Locations count:', locations?.length);
        
        setData(locations || []);
      } catch (err) {
        console.error('❌ Error in fetchLocations:', err);
        setError(err);
        setData([]);
      } finally {
        console.log('🏁 fetchLocations finished, setting loading to false');
        setLoading(false);
      }
    };

    fetchLocations();
  }, [schoolId]); // Only depend on schoolId, not the callback function

  // Create a stable refetch function
  const refetch = useCallback(async () => {
    if (!schoolId) return;
    
    try {
      setLoading(true);
      setError(null);
      const locations = await airtableService.fetchSchoolLocations(schoolId);
      setData(locations || []);
    } catch (err) {
      setError(err);
      setData([]);
    } finally {
      setLoading(false);
    }
  }, [schoolId]);

  console.log('🚨 useSchoolLocations returning:', { data, loading, error, refetch });
  return { data, loading, error, refetch };
};

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\HOOKS\USECACHEDDATA.JSX CODE IS BELOW
// src/hooks/useCachedData.jsx
// Cached versions of your data hooks

import { useState, useEffect, useCallback } from 'react';
import { dataCache, CACHE_KEYS } from '../utils/dataCache';
import { airtableService } from '../airtableService';

// Generic cached data hook
export const useCachedData = (cacheKey, fetchFunction, options = {}) => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchData = useCallback(async (forceRefresh = false) => {
    try {
      // Check cache first (unless forcing refresh)
      if (!forceRefresh) {
        const cached = dataCache.get(cacheKey, options);
        if (cached) {
          setData(cached.data || []);
          setLoading(false);
          setError(cached.error);
          return cached.data;
        }
      }

      // Check if already loading to prevent duplicate requests
      if (dataCache.isLoading(cacheKey, options)) {
        console.log(`⏳ Already loading ${cacheKey}, skipping duplicate request`);
        return;
      }

      console.log(`🔄 Fetching fresh data for ${cacheKey}${forceRefresh ? ' (forced)' : ''}`);
      
      setLoading(true);
      setError(null);
      dataCache.setLoading(cacheKey, true, options);
      
      const result = await fetchFunction();
      
      // Cache the result
      dataCache.set(cacheKey, result, options);
      
      setData(result || []);
      setLoading(false);
      
      return result;
    } catch (err) {
      console.error(`❌ Error fetching ${cacheKey}:`, err);
      setError(err);
      setLoading(false);
      
      // Cache the error too
      dataCache.set(cacheKey, [], options, err);
      throw err;
    } finally {
      dataCache.setLoading(cacheKey, false, options);
    }
  }, [cacheKey, fetchFunction, options]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  const refetch = useCallback(() => {
    return fetchData(true); // Force refresh
  }, [fetchData]);

  const invalidateCache = useCallback(() => {
    dataCache.invalidate(cacheKey, options);
  }, [cacheKey, options]);

  return { 
    data, 
    loading, 
    error, 
    refetch, 
    invalidateCache
  };
};

// Cached Schools Hook
export const useCachedSchools = (includeInactive = false) => {
  const options = { includeInactive };
  
  const fetchFunction = useCallback(async () => {
    console.log('🏫 Fetching schools from API, includeInactive:', includeInactive);
    return await airtableService.fetchSchools(includeInactive);
  }, [includeInactive]);

  return useCachedData(CACHE_KEYS.SCHOOLS, fetchFunction, options);
};

// Cached Educators Hook
export const useCachedEducators = (includeInactive = false) => {
  const options = { includeInactive };
  
  const fetchFunction = useCallback(async () => {
    console.log('👩‍🏫 Fetching educators from API, includeInactive:', includeInactive);
    return await airtableService.fetchEducators(includeInactive);
  }, [includeInactive]);

  return useCachedData(CACHE_KEYS.EDUCATORS, fetchFunction, options);
};

// Cached EducatorsXSchools Hook
export const useCachedEducatorsXSchools = () => {
  const fetchFunction = useCallback(async () => {
    console.log('🔗 Fetching educators x schools from API');
    return await airtableService.fetchEducatorsXSchools();
  }, []);

  return useCachedData(CACHE_KEYS.EDUCATORS_X_SCHOOLS, fetchFunction);
};

// Cached School-specific data hooks (these can be cached per school)
export const useCachedSchoolLocations = (schoolId) => {
  const options = { schoolId };
  
  const fetchFunction = useCallback(async () => {
    if (!schoolId) return [];
    console.log('📍 Fetching school locations from API for:', schoolId);
    return await airtableService.fetchSchoolLocations(schoolId);
  }, [schoolId]);

  return useCachedData(CACHE_KEYS.SCHOOL_LOCATIONS, fetchFunction, options);
};

export const useCachedSchoolNotes = (schoolId) => {
  const options = { schoolId };
  
  const fetchFunction = useCallback(async () => {
    if (!schoolId) return [];
    console.log('📝 Fetching school notes from API for:', schoolId);
    return await airtableService.fetchSchoolNotes(schoolId);
  }, [schoolId]);

  return useCachedData(CACHE_KEYS.SCHOOL_NOTES, fetchFunction, options);
};

export const useCachedActionSteps = (schoolId) => {
  const options = { schoolId };
  
  const fetchFunction = useCallback(async () => {
    if (!schoolId) return [];
    console.log('✅ Fetching action steps from API for:', schoolId);
    return await airtableService.fetchSchoolActionSteps(schoolId);
  }, [schoolId]);

  return useCachedData(CACHE_KEYS.ACTION_STEPS, fetchFunction, options);
};

export const useCachedGovernanceDocs = (schoolId) => {
  const options = { schoolId };
  
  const fetchFunction = useCallback(async () => {
    if (!schoolId) return [];
    console.log('📋 Fetching governance docs from API for:', schoolId);
    return await airtableService.fetchSchoolGovernanceDocs(schoolId);
  }, [schoolId]);

  return useCachedData(CACHE_KEYS.GOVERNANCE_DOCS, fetchFunction, options);
};

export const useCachedGuideAssignments = (schoolId) => {
  const options = { schoolId };
  
  const fetchFunction = useCallback(async () => {
    if (!schoolId) return [];
    console.log('👥 Fetching guide assignments from API for:', schoolId);
    return await airtableService.fetchSchoolGuideAssignments(schoolId);
  }, [schoolId]);

  return useCachedData(CACHE_KEYS.GUIDE_ASSIGNMENTS, fetchFunction, options);
};

export const useCachedGrants = (schoolId) => {
  const options = { schoolId };
  
  const fetchFunction = useCallback(async () => {
    if (!schoolId) return [];
    console.log('💰 Fetching grants from API for:', schoolId);
    return await airtableService.fetchSchoolGrants(schoolId);
  }, [schoolId]);

  return useCachedData(CACHE_KEYS.GRANTS, fetchFunction, options);
};

export const useCachedLoans = (schoolId) => {
  const options = { schoolId };
  
  const fetchFunction = useCallback(async () => {
    if (!schoolId) return [];
    console.log('🏦 Fetching loans from API for:', schoolId);
    return await airtableService.fetchSchoolLoans(schoolId);
  }, [schoolId]);

  return useCachedData(CACHE_KEYS.LOANS, fetchFunction, options);
};

export const useCachedMembershipFees = (schoolId) => {
  const options = { schoolId };
  
  const fetchFunction = useCallback(async () => {
    if (!schoolId) return [];
    console.log('💳 Fetching membership fees from API for:', schoolId);
    return await airtableService.fetchSchoolMembershipFees(schoolId);
  }, [schoolId]);

  return useCachedData(CACHE_KEYS.MEMBERSHIP_FEES, fetchFunction, options);
};

// Mutation hook that invalidates relevant cache entries
export const useCachedMutations = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const createRecord = useCallback(async (tableName, fields) => {
    try {
      setLoading(true);
      setError(null);
      
      const result = await airtableService.createRecord(tableName, fields);
      
      // Invalidate relevant cache entries
      invalidateCacheForTable(tableName);
      
      return result;
    } catch (err) {
      setError(err);
      throw err;
    } finally {
      setLoading(false);
    }
  }, []);

  const updateRecord = useCallback(async (tableName, recordId, fields) => {
    try {
      setLoading(true);
      setError(null);
      
      const result = await airtableService.updateRecord(tableName, recordId, fields);
      
      // Invalidate relevant cache entries
      invalidateCacheForTable(tableName);
      
      return result;
    } catch (err) {
      setError(err);
      throw err;
    } finally {
      setLoading(false);
    }
  }, []);

  const deleteRecord = useCallback(async (tableName, recordId) => {
    try {
      setLoading(true);
      setError(null);
      
      const result = await airtableService.deleteRecord(tableName, recordId);
      
      // Invalidate relevant cache entries
      invalidateCacheForTable(tableName);
      
      return result;
    } catch (err) {
      setError(err);
      throw err;
    } finally {
      setLoading(false);
    }
  }, []);

  return {
    createRecord,
    updateRecord,
    deleteRecord,
    loading,
    error
  };
};

// Helper function to invalidate cache based on table name
const invalidateCacheForTable = (tableName) => {
  console.log(`🗑️ Invalidating cache for table: ${tableName}`);
  
  switch (tableName) {
    case 'Schools':
      dataCache.invalidateType(CACHE_KEYS.SCHOOLS);
      break;
    case 'Educators':
      dataCache.invalidateType(CACHE_KEYS.EDUCATORS);
      break;
    case 'Educators x Schools':
      dataCache.invalidateType(CACHE_KEYS.EDUCATORS_X_SCHOOLS);
      break;
    case 'Locations':
      dataCache.invalidateType(CACHE_KEYS.SCHOOL_LOCATIONS);
      break;
    case 'School notes':
      dataCache.invalidateType(CACHE_KEYS.SCHOOL_NOTES);
      break;
    case 'Action steps':
      dataCache.invalidateType(CACHE_KEYS.ACTION_STEPS);
      break;
    case 'Governance docs':
      dataCache.invalidateType(CACHE_KEYS.GOVERNANCE_DOCS);
      break;
    case 'Guides Assignments':
      dataCache.invalidateType(CACHE_KEYS.GUIDE_ASSIGNMENTS);
      break;
    case 'Grants':
      dataCache.invalidateType(CACHE_KEYS.GRANTS);
      break;
    case 'Loans':
      dataCache.invalidateType(CACHE_KEYS.LOANS);
      break;
    case 'Membership fee overview':
      dataCache.invalidateType(CACHE_KEYS.MEMBERSHIP_FEES);
      break;
    default:
      console.log(`⚠️ No cache invalidation rule for table: ${tableName}`);
  }
};

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\HOOKS\USEEDUCATORFILTERS.JSX CODE IS BELOW
﻿import { useState, useMemo } from 'react';

export const useEducatorFilters = (educatorsData) => {
    const [includeInactiveEducators, setIncludeInactiveEducators] = useState(false);

    const filteredEducators = useMemo(() => {
        console.log('🔍 Filtering educators:', {
            totalEducators: educatorsData?.length,
            includeInactive: includeInactiveEducators,
            sampleEducatorsData: educatorsData?.slice(0, 3)
        });

        if (!educatorsData || !Array.isArray(educatorsData)) {
            console.log('⚠️ No educators data or not array');
            return [];
        }

        if (includeInactiveEducators) {
            console.log('✅ Including all educators:', educatorsData.length);
            return educatorsData;
        }

        // Filter to only show active educators
        const activeEducators = educatorsData.filter(educator => {
            const discoveryStatus = educator.discoveryStatus;
            const individualType = educator.individualType;

            const isDiscoveryActive = discoveryStatus !== 'Paused';
            const isNotCommunityMember = individualType !== 'Community member';

            const isActive = isDiscoveryActive && isNotCommunityMember;

            if (!isActive) {
                console.log('🚫 Filtering out educator:', educator.fullName, {
                    discoveryStatus,
                    individualType,
                    isDiscoveryActive,
                    isNotCommunityMember
                });
            }

            return isActive;
        });

        console.log('✅ Active educators filtered:', activeEducators.length, 'out of', educatorsData.length);
        return activeEducators;
    }, [educatorsData, includeInactiveEducators]); // Make sure includeInactiveEducators is in the dependency array

    return {
        includeInactiveEducators,
        setIncludeInactiveEducators,
        filteredEducators
    };
};

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\HOOKS\USEFILTERS.JSX CODE IS BELOW
import { useState, useCallback, useMemo } from 'react';

export const useFilters = () => {
    const [searchTerm, setSearchTerm] = useState('');
    const [showFilters, setShowFilters] = useState(false);
    const [columnFilters, setColumnFilters] = useState({});

    const handleColumnFilterChange = useCallback((columnKey, value) => {
        setColumnFilters(prev => ({
            ...prev,
            [columnKey]: value
        }));
    }, []);

    const clearAllFilters = useCallback(() => {
        setColumnFilters({});
        setSearchTerm('');
    }, []);

    const hasActiveFilters = useMemo(() => {
        return searchTerm.trim() || Object.keys(columnFilters).some(key => {
            const filter = columnFilters[key];
            if (Array.isArray(filter)) return filter.length > 0;
            return filter && filter.trim();
        });
    }, [searchTerm, columnFilters]);

    return {
        searchTerm,
        setSearchTerm,
        showFilters,
        setShowFilters,
        columnFilters,
        setColumnFilters,
        handleColumnFilterChange,
        clearAllFilters,
        hasActiveFilters
    };
};



C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\HOOKS\USENAVIGATION.JSX CODE IS BELOW
import { useState, useCallback } from 'react';

export const useNavigation = () => {
  const [selectedItem, setSelectedItem] = useState(null);

  const navigateToItem = useCallback((type, data) => {
    console.log('Navigating to:', type, data.name || data.firstName);
    setSelectedItem({ type, data });
  }, []);

  const navigateBack = useCallback(() => {
    setSelectedItem(null);
  }, []);

  const navigateToEducator = useCallback((educatorId, allEducators) => {
    const educator = allEducators.find(ed => ed.id === educatorId);
    if (educator) {
      setSelectedItem({ type: 'educators', data: educator });
    }
  }, []);

  return { 
    selectedItem, 
    navigateToItem, 
    navigateBack, 
    navigateToEducator 
  };
};



C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\HOOKS\USESCHOOLFILTERS.JSX CODE IS BELOW
import { useState, useMemo } from 'react';

export const useSchoolFilters = (schools) => {
    const [includeInactiveSchools, setIncludeInactiveSchools] = useState(false);

    const filteredSchools = useMemo(() => {
        console.log('?? Filtering schools:', {
            totalSchools: schools?.length,
            includeInactive: includeInactiveSchools,
            sampleSchoolsData: schools?.slice(0, 3)
        });

        if (!schools || !Array.isArray(schools)) {
            console.log('? No schools data or not array');
            return [];
        }

        if (includeInactiveSchools) {
            console.log('? Including all schools:', schools.length);
            return schools;
        }

        // Filter to only show active schools (Open and Emerging)
        const activeSchools = schools.filter(school => {
            const status = school.status;
            const isActive = status === 'Open' || status === 'Emerging';

            if (!isActive) {
                console.log('?? Filtering out school:', school.name, 'with status:', status);
            }

            return isActive;
        });

        console.log('? Active schools filtered:', activeSchools.length, 'out of', schools.length);
        return activeSchools;
    }, [schools, includeInactiveSchools]);

    return {
        includeInactiveSchools,
        setIncludeInactiveSchools,
        filteredSchools
    };
};

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\HOOKS\USETABCOUNTS.JSX CODE IS BELOW
import { useMemo } from 'react';

export const useTabCounts = (schoolsData, schoolsLoading, educatorsData, chartersData, includeInactiveSchools) => {
    return useMemo(() => {
        const schoolCount = schoolsLoading ? '...' : `${schoolsData?.length || 0}${includeInactiveSchools ? '' : ' active'}`;

        return [
            {
                id: 'schools',
                label: 'Schools',
                count: schoolCount
            },
            {
                id: 'educators',
                label: 'Educators',
                count: educatorsData?.length || 0
            },
            {
                id: 'charters',
                label: 'Charters',
                count: chartersData?.length || 0
            }
        ];
    }, [schoolsData?.length, schoolsLoading, educatorsData?.length, chartersData?.length, includeInactiveSchools]);
};

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\HOOKS\USETABLECOLUMNS.JSX CODE IS BELOW
import { useMemo } from 'react';
import StatusBadge from '../components/shared/StatusBadge';
import { TABS } from '../utils/constants.js';

export const useTableColumns = (dataType) => {
    return useMemo(() => {
        switch (dataType) {
            case 'educators':
                return [
                    {
                        key: 'fullName',
                        label: 'Name',
                        defaultWidth: 100,
                        render: (value, item) => `${item.fullName}`
                    },
                    {
                        key: 'currentSchool',
                        label: 'Current School',
                        defaultWidth: 160,
                        render: (value) => value || '-'
                    },
                    {
                        key: 'role',
                        label: 'Role(s)',
                        defaultWidth: 120,
                        render: (value) => value || '-'
                    },
                    {
                        key: 'email',
                        label: 'Email',
                        defaultWidth: 180,
                        render: (value) => value || '-'
                    },
                    {
                        key: 'raceEthnicity',
                        label: 'Race & Ethnicity',
                        defaultWidth: 100,
                        render: (value) => Array.isArray(value) ? value.join(', ') : value || '-'
                    },
                    {
                        key: 'discoveryStatus',
                        label: 'Discovery Status',
                        defaultWidth: 80,
                        render: (value) => value ? <StatusBadge status={value} /> : '-'
                    },
                    {
                        key: 'individualType',
                        label: 'Type',
                        defaultWidth: 60,
                        render: (value) => value || '-'
                    }
                ];

            case 'schools':
                return [
                    { key: 'shortName', label: 'Short Name' , defaultWidth: 120,},
                    { key: 'status', label: 'Status', defaultWidth: 80, render: (value) => <StatusBadge status={value} />},
                    { key: 'governanceModel', label: 'Governance', defaultWidth: 100},
                    { key: 'agesServed', label: 'Ages Served', defaultWidth: 100, render: (value) => Array.isArray(value) ? value.join(', ') : value},
                    {
                        key: 'location',
                        label: 'Location',
                        defaultWidth: 140,
                        render: (value, item) => {
                            if (item.activeLocationCity && item.activeLocationState) {
                                return `${item.activeLocationCity}, ${item.activeLocationState}`;
                            }
                            if (item.targetCity && item.targetState) {
                                return `${item.targetCity}, ${item.targetState}`;
                            }
                            if (item.targetCity) {
                                return item.targetCity;
                            }
                            return '-';
                        }
                    },
                    { key: 'membershipStatus', label: 'Membership', defaultWidth: 80, render: (value) => <StatusBadge status={value} /> }
                ];

            case 'charters':
                return [
                    { key: 'name', label: 'Name' },
                    { key: 'status', label: 'Status', render: (value) => <StatusBadge status={value} /> },
                    { key: 'initialTargetCommunity', label: 'Target Community' }
                ];

            default:
                return [];
        }
    }, [dataType]);
};

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\HOOKS\USEUNIFIEDDATA.JSX CODE IS BELOW
// src/hooks/useUnifiedData.jsx - Clean version without sample data

import { useMemo } from 'react';
import { 
  useCachedSchools, 
  useCachedEducators, 
  useCachedEducatorsXSchools,
  useCachedSchoolLocations,
  useCachedSchoolNotes,
  useCachedActionSteps,
  useCachedGovernanceDocs,
  useCachedGuideAssignments,
  useCachedGrants,
  useCachedLoans,
  useCachedMembershipFees
} from './useCachedData';
import { transformSchoolsData, transformEducatorsXSchoolsData, transformLocationsData } from '../utils/dataTransformers.js';
import { TABS } from '../utils/constants.js';

const useUnifiedData = (dataType, options = {}) => {
    switch (dataType) {
        case TABS.SCHOOLS:
            return useUnifiedSchools(options);
        case TABS.EDUCATORS:
            return useUnifiedEducators(options);
        case TABS.CHARTERS:
            return useUnifiedCharters(options);
        default:
            return { data: [], loading: false, error: null };
    }
};

const useUnifiedSchools = (options = {}) => {
    const { includeInactive = false } = options;
    const schoolsResult = useCachedSchools(includeInactive);

    const transformedData = useMemo(() => {
        const { data: rawSchoolsData, loading, error } = schoolsResult;

        if (!loading && !error && Array.isArray(rawSchoolsData) && rawSchoolsData.length > 0) {
            console.log('✅ Using schools data:', rawSchoolsData.length, 'schools');
            return transformSchoolsData(rawSchoolsData);
        }

        if (loading) {
            console.log('⏳ Schools still loading...');
        } else if (error) {
            console.log('❌ Schools error:', error.message);
        } else {
            console.log('📭 No schools data available');
        }

        return [];
    }, [schoolsResult]);

    return {
        data: transformedData,
        loading: schoolsResult.loading,
        error: schoolsResult.error,
        refetch: schoolsResult.refetch
    };
};

const useUnifiedEducators = (options = {}) => {
    const { includeInactive = false } = options;
    const educatorsResult = useCachedEducators(includeInactive);

    const data = useMemo(() => {
        const { data: rawEducatorsData, loading, error } = educatorsResult;

        if (!loading && !error && Array.isArray(rawEducatorsData) && rawEducatorsData.length > 0) {
            console.log('✅ Using educators data:', rawEducatorsData.length, 'educators');
            return rawEducatorsData;
        }

        if (loading) {
            console.log('⏳ Educators still loading...');
        } else if (error) {
            console.log('❌ Educators error:', error.message);
        } else {
            console.log('📭 No educators data available');
        }

        return [];
    }, [educatorsResult]);

    return {
        data,
        loading: educatorsResult.loading,
        error: educatorsResult.error,
        refetch: educatorsResult.refetch
    };
};

const useUnifiedCharters = () => {
    // TODO: Implement real charters data when needed

    return {
        data: [],
        loading: false,
        error: null,
        refetch: () => Promise.resolve([])
    };
};

// Related data hooks - all real data, no fallbacks
export const useEducatorsXSchools = () => {
    const realDataResult = useCachedEducatorsXSchools();
    
    return useMemo(() => {
        const { data: realData, loading, error } = realDataResult;
  
        if (!loading && !error && Array.isArray(realData) && realData.length > 0) {
            console.log('✅ Using EducatorsXSchools data:', realData.length, 'relationships');
            return {
                data: transformEducatorsXSchoolsData(realData),
                loading: false,
                error: null,
                refetch: realDataResult.refetch
            };
        }
        
        return {
            data: [],
            loading,
            error,
            refetch: realDataResult.refetch
        };
    }, [realDataResult]);
};

export const useSchoolLocations = (schoolId) => {
    const realDataResult = useCachedSchoolLocations(schoolId);
    
    return useMemo(() => {
        const { data: realData, loading, error } = realDataResult;
        
        if (!loading && !error && Array.isArray(realData)) {
            if (realData.length > 0) {
                console.log('✅ Using locations data for school:', schoolId, realData.length, 'locations');
                return {
                    data: transformLocationsData(realData),
                    loading: false,
                    error: null,
                    refetch: realDataResult.refetch
                };
            } else {
                console.log('📭 No locations found for school:', schoolId);
            }
        }
        
        return {
            data: [],
            loading,
            error,
            refetch: realDataResult.refetch
        };
    }, [realDataResult, schoolId]);
};

// Clean school-specific data hooks
export const useSchoolNotes = (schoolId) => {
    const result = useCachedSchoolNotes(schoolId);
    
    return {
        data: result.data || [],
        loading: result.loading,
        error: result.error,
        refetch: result.refetch
    };
};

export const useActionSteps = (schoolId) => {
    const result = useCachedActionSteps(schoolId);
    
    return {
        data: result.data || [],
        loading: result.loading,
        error: result.error,
        refetch: result.refetch
    };
};

export const useGovernanceDocs = (schoolId) => {
    const result = useCachedGovernanceDocs(schoolId);
    
    return {
        data: result.data || [],
        loading: result.loading,
        error: result.error,
        refetch: result.refetch
    };
};

export const useGuideAssignments = (schoolId) => {
    const result = useCachedGuideAssignments(schoolId);
    
    return {
        data: result.data || [],
        loading: result.loading,
        error: result.error,
        refetch: result.refetch
    };
};

export const useGrants = (schoolId) => {
    const result = useCachedGrants(schoolId);
    
    return {
        data: result.data || [],
        loading: result.loading,
        error: result.error,
        refetch: result.refetch
    };
};

export const useLoans = (schoolId) => {
    const result = useCachedLoans(schoolId);
    
    return {
        data: result.data || [],
        loading: result.loading,
        error: result.error,
        refetch: result.refetch
    };
};

export const useMembershipFeeRecords = (schoolId) => {
    const result = useCachedMembershipFees(schoolId);
    
    return {
        data: result.data || [],
        loading: result.loading,
        error: result.error,
        refetch: result.refetch
    };
};

// Placeholder hooks for features not yet implemented
export const useSSJForms = (educatorId) => {

    return {
        data: [],
        loading: false,
        error: null,
        refetch: () => Promise.resolve([])
    };
};

export const useEventAttendance = (educatorId) => {

    return {
        data: [],
        loading: false,
        error: null,
        refetch: () => Promise.resolve([])
    };
};

export const useMontessoriCerts = (educatorId) => {

    return {
        data: [],
        loading: false,
        error: null,
        refetch: () => Promise.resolve([])
    };
};

export const useEducatorNotes = (educatorId) => {
    console.log('⚠️ Educator Notes not implemented yet for educator:', educatorId);
    return {
        data: [],
        loading: false,
        error: null,
        refetch: () => Promise.resolve([])
    };
};

export const useMembershipFeeUpdates = (schoolId, schoolYear = null) => {
    console.log('⚠️ Membership Fee Updates not implemented yet for school:', schoolId, 'year:', schoolYear);
    return {
        data: [],
        loading: false,
        error: null,
        refetch: () => Promise.resolve([])
    };
};

export default useUnifiedData;

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\INDEX.CSS CODE IS BELOW
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Wildflower Schools Database - Manage schools, educators, and network data"
    />
    <title>Wildflower Schools Database</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\LOCATIONEDITMODAL.JSX CODE IS BELOW
// src/components/LocationEditModal.jsx
import React, { useState, useEffect } from 'react';
import { X } from 'lucide-react';

const LocationEditModal = ({ isOpen, onClose, onSubmit, location, isCreating = false, schoolId }) => {
    const [formData, setFormData] = useState({
        address: '',
        startDate: '',
        endDate: '',
        locationType: '',
        currentMailingAddress: false,
        currentPhysicalAddress: false,
        squareFeet: '',
        maxStudentsLicensedFor: '',
        neighborhood: '',
        coLocationType: '',
        coLocationPartner: '',
        leaseEndDate: '',
        lease: '',
        timeZone: ''
    });

    const locationTypeOptions = [
        'School address and mailing address',
        'School address only',
        'Mailing address only',
        'Former school address',
        'Former mailing address',
        'Temporary location'
    ];

    const coLocationTypeOptions = [
        'None',
        'Shared facility',
        'Sublease',
        'Partnership',
        'Community center',
        'Other'
    ];

    const timeZoneOptions = [
        'Eastern Time (ET)',
        'Central Time (CT)',
        'Mountain Time (MT)',
        'Pacific Time (PT)',
        'Alaska Time (AKT)',
        'Hawaii-Aleutian Time (HAT)'
    ];

    useEffect(() => {
        if (location && isOpen && !isCreating) {
            setFormData({
                address: location.address || '',
                startDate: location.startDate || '',
                endDate: location.endDate || '',
                locationType: location.locationType || '',
                currentMailingAddress: location.currentMailingAddress || false,
                currentPhysicalAddress: location.currentPhysicalAddress || false,
                squareFeet: location.squareFeet || '',
                maxStudentsLicensedFor: location.maxStudentsLicensedFor || '',
                neighborhood: location.neighborhood || '',
                coLocationType: location.coLocationType || '',
                coLocationPartner: location.coLocationPartner || '',
                leaseEndDate: location.leaseEndDate || '',
                lease: location.lease || '',
                timeZone: location.timeZone || ''
            });
        } else if (isCreating) {
            setFormData({
                address: '',
                startDate: new Date().toISOString().split('T')[0],
                endDate: '',
                locationType: '',
                currentMailingAddress: false,
                currentPhysicalAddress: false,
                squareFeet: '',
                maxStudentsLicensedFor: '',
                neighborhood: '',
                coLocationType: '',
                coLocationPartner: '',
                leaseEndDate: '',
                lease: '',
                timeZone: ''
            });
        }
    }, [location, isOpen, isCreating]);

    const handleInputChange = (field, value) => {
        setFormData(prev => ({
            ...prev,
            [field]: value
        }));
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        if (!formData.address || !formData.startDate || !formData.locationType) {
            return;
        }

        const locationData = {
            ...formData,
            schoolId: schoolId,
            id: isCreating ? undefined : location.id
        };

        onSubmit(locationData);
        onClose();
    };

    const handleClose = () => {
        setFormData({
            address: '',
            startDate: '',
            endDate: '',
            locationType: '',
            currentMailingAddress: false,
            currentPhysicalAddress: false,
            squareFeet: '',
            maxStudentsLicensedFor: '',
            neighborhood: '',
            coLocationType: '',
            coLocationPartner: '',
            leaseEndDate: '',
            lease: '',
            timeZone: ''
        });
        onClose();
    };

    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
                <div className="flex items-center justify-between mb-4">
                    <h3 className="text-lg font-semibold">
                        {isCreating ? 'Add New Location' : 'Edit Location'}
                    </h3>
                    <button onClick={handleClose} className="text-gray-400 hover:text-gray-600">
                        <X className="w-5 h-5" />
                    </button>
                </div>

                <form onSubmit={handleSubmit} className="space-y-6">
                    {/* Basic Information */}
                    <div>
                        <h4 className="text-md font-medium text-gray-900 mb-3">Basic Information</h4>
                        <div className="grid grid-cols-2 gap-4">
                            <div className="col-span-2">
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Address *
                                </label>
                                <textarea
                                    value={formData.address}
                                    onChange={(e) => handleInputChange('address', e.target.value)}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                    rows="3"
                                    placeholder="Enter full address..."
                                    required
                                />
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Neighborhood
                                </label>
                                <input
                                    type="text"
                                    value={formData.neighborhood}
                                    onChange={(e) => handleInputChange('neighborhood', e.target.value)}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                />
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Time Zone
                                </label>
                                <select
                                    value={formData.timeZone}
                                    onChange={(e) => handleInputChange('timeZone', e.target.value)}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                >
                                    <option value="">Select time zone...</option>
                                    {timeZoneOptions.map(tz => (
                                        <option key={tz} value={tz}>{tz}</option>
                                    ))}
                                </select>
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Square Feet
                                </label>
                                <input
                                    type="number"
                                    value={formData.squareFeet}
                                    onChange={(e) => handleInputChange('squareFeet', e.target.value)}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                />
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Max Students Licensed For
                                </label>
                                <input
                                    type="number"
                                    value={formData.maxStudentsLicensedFor}
                                    onChange={(e) => handleInputChange('maxStudentsLicensedFor', e.target.value)}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                />
                            </div>
                        </div>
                    </div>

                    {/* Location Details */}
                    <div>
                        <h4 className="text-md font-medium text-gray-900 mb-3">Location Details</h4>
                        <div className="grid grid-cols-2 gap-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Location Type *
                                </label>
                                <select
                                    value={formData.locationType}
                                    onChange={(e) => handleInputChange('locationType', e.target.value)}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                    required
                                >
                                    <option value="">Select location type...</option>
                                    {locationTypeOptions.map(type => (
                                        <option key={type} value={type}>{type}</option>
                                    ))}
                                </select>
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Co-Location Type
                                </label>
                                <select
                                    value={formData.coLocationType}
                                    onChange={(e) => handleInputChange('coLocationType', e.target.value)}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                >
                                    <option value="">Select co-location type...</option>
                                    {coLocationTypeOptions.map(type => (
                                        <option key={type} value={type}>{type}</option>
                                    ))}
                                </select>
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Co-Location Partner
                                </label>
                                <input
                                    type="text"
                                    value={formData.coLocationPartner}
                                    onChange={(e) => handleInputChange('coLocationPartner', e.target.value)}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                />
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Lease
                                </label>
                                <input
                                    type="text"
                                    value={formData.lease}
                                    onChange={(e) => handleInputChange('lease', e.target.value)}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                    placeholder="Lease details..."
                                />
                            </div>
                        </div>
                    </div>

                    {/* Dates */}
                    <div>
                        <h4 className="text-md font-medium text-gray-900 mb-3">Dates</h4>
                        <div className="grid grid-cols-3 gap-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Start of time at location *
                                </label>
                                <input
                                    type="date"
                                    value={formData.startDate}
                                    onChange={(e) => handleInputChange('startDate', e.target.value)}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                    required
                                />
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    End of time at location
                                </label>
                                <input
                                    type="date"
                                    value={formData.endDate}
                                    onChange={(e) => handleInputChange('endDate', e.target.value)}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                />
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Lease End Date
                                </label>
                                <input
                                    type="date"
                                    value={formData.leaseEndDate}
                                    onChange={(e) => handleInputChange('leaseEndDate', e.target.value)}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                />
                            </div>
                        </div>
                    </div>

                    {/* Status */}
                    <div>
                        <h4 className="text-md font-medium text-gray-900 mb-3">Status</h4>
                        <div className="space-y-2">
                            <label className="flex items-center">
                                <input
                                    type="checkbox"
                                    checked={formData.currentMailingAddress}
                                    onChange={(e) => handleInputChange('currentMailingAddress', e.target.checked)}
                                    className="mr-2 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                                />
                                <span className="text-sm font-medium text-gray-700">Current Mailing Address</span>
                            </label>

                            <label className="flex items-center">
                                <input
                                    type="checkbox"
                                    checked={formData.currentPhysicalAddress}
                                    onChange={(e) => handleInputChange('currentPhysicalAddress', e.target.checked)}
                                    className="mr-2 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                                />
                                <span className="text-sm font-medium text-gray-700">Current Physical Address</span>
                            </label>
                        </div>
                    </div>

                    <div className="flex space-x-3 pt-4 border-t">
                        <button
                            type="button"
                            onClick={handleClose}
                            className="flex-1 px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
                        >
                            Cancel
                        </button>
                        <button
                            type="submit"
                            disabled={!formData.address || !formData.startDate || !formData.locationType}
                            className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed"
                        >
                            {isCreating ? 'Add Location' : 'Update Location'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default LocationEditModal;

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\MAIN.JSX CODE IS BELOW
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './App.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\UTILS\CONSTANTS.JS CODE IS BELOW
// Application tab constants
export const TABS = {
    SCHOOLS: 'schools',
    EDUCATORS: 'educators',
    CHARTERS: 'charters'
};

export const SCHOOL_TABS = {
    SUMMARY: 'summary',
    TLS: 'tls',
    LOCATIONS: 'locations',
    GOVERNANCE: 'governance',
    GUIDES: 'guides',
    SSJ_OSS: 'ssj-oss',
    MEMBERSHIP_FEES: 'membership-fees',
    GRANTS_LOANS: 'grants-loans',
    LINKED_MTGS_EMAILS: 'linked-mtgs-emails',
    NOTES_ACTIONS: 'notes-actions'
};

export const EDUCATOR_TABS = {
    SUMMARY: 'summary',
    DEMOGRAPHICS: 'demographics',
    CONTACT_INFO: 'contact-info',
    SCHOOLS: 'schools',
    ONLINE_FORMS: 'online-forms',
    EARLY_CULTIVATION: 'early-cultivation',
    GUIDES: 'guides',
    CERTS: 'certs',
    NOTES: 'notes',
    EVENTS: 'events',
    LINKED_MTGS_EMAILS: 'linked-mtgs-emails'
};

// Status constants
export const SCHOOL_STATUSES = {
    OPEN: 'Open',
    EMERGING: 'Emerging',
    PERMANENTLY_CLOSED: 'Permanently Closed',
    DISAFFILIATED: 'Disaffiliated',
    DISAFFILIATING: 'Disaffiliating',
    PAUSED: 'Paused',
    PLACEHOLDER: 'Placeholder'
};

export const MEMBERSHIP_STATUSES = {
    MEMBER_SCHOOL: 'Member School',
    PENDING: 'Pending',
    NON_MEMBER_SPECIAL: 'Non-Member - Special Situation',
    FORMER_MEMBER: 'Former Member'
};

export const GOVERNANCE_MODELS = {
    INDEPENDENT: 'Independent',
    CHARTER: 'Charter',
    DISTRICT: 'District'
};

export const DISCOVERY_STATUSES = {
    COMPLETE: 'Complete',
    IN_PROGRESS: 'In Progress',
    NOT_STARTED: 'Not Started',
    PAUSED: 'Paused'
};

export const INDIVIDUAL_TYPES = {
    EDUCATOR: 'Educator',
    COMMUNITY_MEMBER: 'Community Member'
};

// Role constants
export const EDUCATOR_ROLES = [
    'Founder',
    'Teacher Leader',
    'Head of School',
    'Assistant Teacher',
    'Support Staff',
    'Board Member',
    'Board Chair'
];

export const GUIDE_ROLES = [
    'Ops Guide',
    'Regional Entrepreneur'
];

// Time zones
export const TIME_ZONES = [
    'Atlantic Time (AT)',
    'Eastern Time (ET)',
    'Central Time (CT)',
    'Mountain Time (MT)',
    'Pacific Time (PT)',
    'Alaska Time (AKT)',
    'Hawaii-Aleutian Time (HAT)'
];

// Location types
export const LOCATION_TYPES = [
    'School address and mailing address',
    'School address only',
    'Mailing address only',
    'Former school address',
    'Former mailing address',
    'Temporary location'
];

export const CO_LOCATION_TYPES = [
    'None',
    'Shared facility',
    'Sublease',
    'Partnership',
    'Community center',
    'Other'
];

// Error messages
export const ERROR_MESSAGES = {
    NETWORK_ERROR: 'Network error. Please check your connection and try again.',
    AIRTABLE_ERROR: 'Error connecting to database. Please try again later.',
    VALIDATION_ERROR: 'Please check your input and try again.',
    UNAUTHORIZED: 'You are not authorized to perform this action.',
    NOT_FOUND: 'The requested item was not found.',
    GENERIC_ERROR: 'Something went wrong. Please try again.'
};

// Success messages
export const SUCCESS_MESSAGES = {
    RECORD_CREATED: 'Record created successfully',
    RECORD_UPDATED: 'Record updated successfully',
    RECORD_DELETED: 'Record deleted successfully',
    STINT_ADDED: 'Educator stint added successfully',
    STINT_ENDED: 'Stint ended successfully'
};

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\UTILS\DATACACHE.JS CODE IS BELOW
// src/utils/dataCache.js
// Simple in-memory cache for application data

class DataCache {
  constructor() {
    this.cache = new Map();
    this.loading = new Map();
    this.errors = new Map();
    this.timestamps = new Map();
    
    // Cache timeout (5 minutes)
    this.CACHE_TIMEOUT = 5 * 60 * 1000;
  }

  // Generate cache key
  getCacheKey(type, options = {}) {
    const optionsStr = Object.keys(options).length > 0 ? JSON.stringify(options) : '';
    return `${type}${optionsStr}`;
  }

  // Check if cache is valid (not expired)
  isCacheValid(key) {
    const timestamp = this.timestamps.get(key);
    if (!timestamp) return false;
    
    return Date.now() - timestamp < this.CACHE_TIMEOUT;
  }

  // Get cached data
  get(type, options = {}) {
    const key = this.getCacheKey(type, options);
    
    if (this.isCacheValid(key)) {
      console.log(`✅ Cache HIT for ${key}`);
      return {
        data: this.cache.get(key),
        loading: false,
        error: this.errors.get(key) || null,
        fromCache: true
      };
    }
    
    console.log(`❌ Cache MISS for ${key}`);
    return null;
  }

  // Set cached data
  set(type, data, options = {}, error = null) {
    const key = this.getCacheKey(type, options);
    
    this.cache.set(key, data);
    this.errors.set(key, error);
    this.timestamps.set(key, Date.now());
    this.loading.set(key, false);
    
    console.log(`💾 Cached ${key} with ${data?.length || 0} records`);
  }

  // Set loading state
  setLoading(type, isLoading, options = {}) {
    const key = this.getCacheKey(type, options);
    this.loading.set(key, isLoading);
  }

  // Get loading state
  isLoading(type, options = {}) {
    const key = this.getCacheKey(type, options);
    return this.loading.get(key) || false;
  }

  // Invalidate specific cache entry
  invalidate(type, options = {}) {
    const key = this.getCacheKey(type, options);
    
    this.cache.delete(key);
    this.loading.delete(key);
    this.errors.delete(key);
    this.timestamps.delete(key);
    
    console.log(`🗑️ Invalidated cache for ${key}`);
  }

  // Invalidate all cache entries for a type
  invalidateType(type) {
    const keysToDelete = [];
    
    for (const key of this.cache.keys()) {
      if (key.startsWith(type)) {
        keysToDelete.push(key);
      }
    }
    
    keysToDelete.forEach(key => {
      this.cache.delete(key);
      this.loading.delete(key);
      this.errors.delete(key);
      this.timestamps.delete(key);
    });
    
    console.log(`🗑️ Invalidated all cache entries for type: ${type}`);
  }

  // Clear all cache
  clear() {
    this.cache.clear();
    this.loading.clear();
    this.errors.clear();
    this.timestamps.clear();
    
    console.log('🗑️ Cleared all cache');
  }

  // Get cache stats
  getStats() {
    return {
      totalEntries: this.cache.size,
      types: [...new Set([...this.cache.keys()].map(key => key.split('{')[0]))],
      oldestEntry: Math.min(...this.timestamps.values()),
      newestEntry: Math.max(...this.timestamps.values())
    };
  }
}

// Create singleton instance
export const dataCache = new DataCache();

// Cache keys constants
export const CACHE_KEYS = {
  SCHOOLS: 'schools',
  EDUCATORS: 'educators',
  CHARTERS: 'charters',
  EDUCATORS_X_SCHOOLS: 'educatorsXSchools',
  SCHOOL_LOCATIONS: 'schoolLocations',
  SCHOOL_NOTES: 'schoolNotes',
  ACTION_STEPS: 'actionSteps',
  GOVERNANCE_DOCS: 'governanceDocs',
  GUIDE_ASSIGNMENTS: 'guideAssignments',
  GRANTS: 'grants',
  LOANS: 'loans',
  MEMBERSHIP_FEES: 'membershipFees'
};

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\SRC\UTILS\DATATRANSFORMERS.JS CODE IS BELOW
// Transform Airtable school record to match your React app format
export const transformSchoolData = (airtableRecord, relatedData = {}) => {
  if (!airtableRecord) return null;

  return {
    id: airtableRecord.id,
    name: airtableRecord['Name'] || '',
    shortName: airtableRecord['Short Name'] || airtableRecord['Name'] || '',
    status: airtableRecord['School Status'] || '',
    governanceModel: airtableRecord['Governance Model'] || '',
    agesServed: airtableRecord['Ages served'] || [],

    location: airtableRecord['Current Physical Address'] ? 
      (Array.isArray(airtableRecord['Current Physical Address']) ? 
        airtableRecord['Current Physical Address'][0] : 
        airtableRecord['Current Physical Address']) : '',

    // Location fields with debugging WHY IS THIS HERE IN THIS WAY?
    activeLocationCity: airtableRecord['Current Physical Address - City'] ? 
      (Array.isArray(airtableRecord['Current Physical Address - City']) ? 
        airtableRecord['Current Physical Address - City'][0] : 
        airtableRecord['Current Physical Address - City']) : null,
    activeLocationState: airtableRecord['Current Physical Address - State'] ? 
      (Array.isArray(airtableRecord['Current Physical Address - State']) ? 
        airtableRecord['Current Physical Address - State'][0] : 
        airtableRecord['Current Physical Address - State']) : null,
    targetCity: airtableRecord['SSJ - Target City'] || null,
    targetState: airtableRecord['SSJ - Target State'] || null,

    membershipStatus: airtableRecord['Membership Status'] || '',
    founders: airtableRecord['Founders'] || [],
    phone: airtableRecord['School Phone'] || null,
    website: airtableRecord['Website'] || '',
    emailDomain: airtableRecord['Email Domain'] || '',
    pod: airtableRecord['Pod'] || '',
    ein: airtableRecord['EIN'] || '',
    legalName: airtableRecord['Legal Name'] || '',
    incorporationDate: airtableRecord['Incorporation Date'] || '', // SHOULD THIS BE CONVERTED TO MM/DD/YYYY HERE OR ELSEWHERE? SAME WITH OTHER DATES
    nonprofitStatus: airtableRecord['Nonprofit status'] || '',
    groupExemptionStatus: airtableRecord['Group exemption status'] || '',
    dateReceivedGroupExemption: airtableRecord['Date received group exemption'] || '',
    currentFYEnd: airtableRecord['Current FY end'] || '',
    nondiscriminationOnApplication: airtableRecord['Nondiscrimination Policy on Application'] || false,
    nondiscriminationOnWebsite: airtableRecord['Nondiscrimination Policy on Website'] || false,
    guidestarRequested: airtableRecord['GuideStar Listing Requested?'] || false,
    flexibleTuitionModel: airtableRecord['Flexible Tuition Model'] || false,
    activePodMember: airtableRecord['Active Pod Member'] || '',
    membershipAgreementDate: airtableRecord['Membership Agreement date'] || '',
    
    // SSJ/OSS Data
    ssjStage: airtableRecord['SSJ Stage'] || '',
    ssjTargetCity: airtableRecord['SSJ - Target City'] || '',
    ssjTargetState: airtableRecord['SSJ - Target State'] || '',
    ssjOriginalProjectedOpenDate: airtableRecord['SSJ - Original Projected Open Date'] || '',
    ssjProjOpenSchoolYear: airtableRecord['SSJ - Proj Open School Year'] || '',
    ssjProjectedOpen: airtableRecord['SSJ - Projected Open'] || '',
    riskFactors: airtableRecord['Risk Factors'] ? //  THIS SHOULD BE LEFT AS AN ARRAY
      (Array.isArray(airtableRecord['Risk Factors']) ? 
        airtableRecord['Risk Factors'].join(', ') : 
        airtableRecord['Risk Factors']) : '-',
    watchlist: airtableRecord['Watchlist'] ?  // THIS SHOULD BE LEFT AS AN ARRAY
      (Array.isArray(airtableRecord['Watchlist']) ? 
        airtableRecord['Watchlist'].join(', ') : 
        airtableRecord['Watchlist']) : '-',
    ssjBoardDevelopment: airtableRecord['SSJ - Board development'] || '',
    ssjCohortStatus: airtableRecord['SSJ - Cohort Status'] || '-',
    enteredVisioningDate: airtableRecord['Entered Visioning Date'] || '',
    cohorts: airtableRecord['Cohorts'] ? // THIS SHOULD BE LEFT AS AN ARRAY
      (Array.isArray(airtableRecord['Cohorts']) ? 
        airtableRecord['Cohorts'].join(', ') : 
        airtableRecord['Cohorts']) : '-',
    visioningAlbumComplete: airtableRecord['Visioning album complete'] || false,
    ssjHasETLPartner: airtableRecord['SSJ - Has the ETL identified a partner?'] || '',
    ssjOpsGuideTrack: airtableRecord['SSJ - Ops Guide Support Track'] ? // THIS SHOULD BE LEFT AS AN ARRAY
      (Array.isArray(airtableRecord['SSJ - Ops Guide Support Track']) ? 
        airtableRecord['SSJ - Ops Guide Support Track'].join(', ') : 
        airtableRecord['SSJ - Ops Guide Support Track']) : '',
    enteredPlanningDate: airtableRecord['Entered Planning Date'] || '',
    planningAlbum: airtableRecord['Planning album'] || '-',
    ssjReadinessRating: airtableRecord['SSJ - Readiness to Open Rating'] || '',
    ssjTool: airtableRecord['SSJ - SSJ Tool'] || '',
    enteredStartupDate: airtableRecord['Entered Startup Date'] || '',
    logoDesigner: airtableRecord['Logo designer'] || '',
    trademarkFiled: airtableRecord['Trademark filed'] || '-',
    nameSelectionProposal: airtableRecord['Name Selection Proposal'] || '-',
    ssjNameReserved: airtableRecord['SSJ - Name Reserved'] || '',
    ssjFacility: airtableRecord['SSJ - Facility'] || '',
    building4GoodFirm: airtableRecord['Building4Good Firm & Attorney'] || '-',
    ssjBuilding4GoodStatus: airtableRecord['SSJ - Building4Good Status'] || '-',
    ssjDateSharedN4G: airtableRecord['SSJ - Date shared with N4G'] || '-',
    ssjAmountRaised: airtableRecord['SSJ - Amount raised'] || '-',
    ssjGapInFunding: airtableRecord['SSJ - Gap in Funding'] || '-',
    ssjLoanApprovedAmt: airtableRecord['SSJ - Loan approved amt'] || '-',
    ssjLoanEligibility: airtableRecord['SSJ - Loan eligibility'] || '-',
    ssjTotalStartupFunding: airtableRecord['SSJ - Total Startup Funding Needed'] || '',
    ssjViablePathway: airtableRecord['SSJ - Does the school have a viable pathway to funding?'] || '',
    ssjFundraisingNarrative: airtableRecord['SSJ - Fundraising narrative'] || '',
    ssjInternalFunding: airtableRecord['SSJ - Is the school planning to apply for internal Wildflower funding?'] || '',
    ssjBudgetStage: airtableRecord['SSJ - Is the budget at a stage that will allow the ETL(s) to take their next steps?'] || '-',
    ssjEnrollmentTrack: airtableRecord['SSJ - Is the team on track for their enrollment goals?'] || '-',
    ssjNextDecision: airtableRecord['SSJ - What is the next big decision or action this school is working on?'] || '',
    
    // Systems
    googleVoice: airtableRecord['Google Voice'] || '-',
    budgetUtility: airtableRecord['Budget Utility'] || '-',
    admissionsSystem: airtableRecord['Admissions System'] || '',
    billComAccount: airtableRecord['Bill.com account'] || '-',
    bookkeeper: airtableRecord['Bookkeeper / Accountant'] || '-',
    businessInsurance: airtableRecord['Business Insurance'] || '-',
    tcRecordkeeping: airtableRecord['TC Recordkeeping'] || '-',
    tcAdmissions: airtableRecord['TC Admissions'] || '-',
    qbo: airtableRecord['QBO'] || '',
    tcSchoolId: airtableRecord['TC school ID'] || '-',
    websiteTool: airtableRecord['Website tool'] || '',
    
    // Additional fields
    currentTLs: airtableRecord['Current TLs'] || [],
    schoolOpenDate: airtableRecord['Opened'] || null,
    programFocus: airtableRecord['Program Focus'] ? // THIS SHOULD BE LEFT AS AN ARRAY
      (Array.isArray(airtableRecord['Program Focus']) ? 
        airtableRecord['Program Focus'].join(', ') : 
        airtableRecord['Program Focus']) : '',
    maxCapacityEnrollments: airtableRecord['Enrollment at Full Capacity'] || null,
    numberOfClassrooms: airtableRecord['Number of classrooms'] || null,
    // publicFunding: // this should be an array from a datafield
    schoolCalendar: airtableRecord['School calendar'] || '',
    schoolSchedule: airtableRecord['School schedule'] ? // this isn't a multi-select
      (Array.isArray(airtableRecord['School schedule']) ? 
        airtableRecord['School schedule'].join(', ') : 
        airtableRecord['School schedule']) : '',
    
    // Membership fields
    signedMembershipAgreementDate: airtableRecord['Membership Agreement date'] || '',
    signedMembershipAgreement: airtableRecord['Signed Membership Agreement'] ? // this should be an attachment field
      (Array.isArray(airtableRecord['Signed Membership Agreement']) && 
       airtableRecord['Signed Membership Agreement'].length > 0 ? 
        airtableRecord['Signed Membership Agreement'][0].url : '') : '',
    agreementVersion: airtableRecord['Agreement Version '] || '',
    
    // Comms info
    schoolEmail: airtableRecord['School Email'] || '',
    facebook: airtableRecord['Facebook'] || '',
    instagram: airtableRecord['Instagram'] || '',
    
    // Legal entity
    legalStructure: airtableRecord['Legal structure'] || '',
    institutionalPartner: airtableRecord['Institutional partner'] || null,
    dateWithdrawnFromGroupExemption: airtableRecord['Date withdrawn from Group Exemption'] || null,
    loanReportName: airtableRecord['Loan Report Name'] || '',
    
    // Closed school fields
    leftNetworkDate: airtableRecord['Left Network Date'] || null,
    leftNetworkReason: airtableRecord['Left Network Reason'] ? // this should be left as an array
      (Array.isArray(airtableRecord['Left Network Reason']) ? 
        airtableRecord['Left Network Reason'].join(', ') : 
        airtableRecord['Left Network Reason']) : null,
    membershipTerminationLetter: airtableRecord['Membership termination letter'] ? // this is an attachment field
      (Array.isArray(airtableRecord['Membership termination letter']) && 
       airtableRecord['Membership termination letter'].length > 0 ? 
        airtableRecord['Membership termination letter'][0].url : '') : null
  };
};

// Transform Airtable educator record to match your React app format
export const transformEducatorData = (airtableRecord) => {
  if (!airtableRecord) return null;

  return {
    id: airtableRecord.id,
    fullName: airtableRecord['Full Name'] || '',
    firstName: airtableRecord['First Name'] || '',
    lastName: airtableRecord['Last Name'] || '',
    primaryEmail: airtableRecord['Current Primary Email Address'] || '',
    emailAddresses: airtableRecord['Email Addresses'] || [],
    currentSchool: airtableRecord['Currently Active School'] ? 
      (Array.isArray(airtableRecord['Currently Active School']) ? 
        airtableRecord['Currently Active School'][0] : 
        airtableRecord['Currently Active School']) : '',
    role: airtableRecord['Current Role'] ? // they could have multiple roles at current school and we want to keep them as an array
      (Array.isArray(airtableRecord['Current Role']) ? 
        airtableRecord['Current Role'][0] : 
        airtableRecord['Current Role']) : '',
    discoveryStatus: airtableRecord['Discovery status'] || '',
    montessoriCertified: airtableRecord['Montessori Certified'] || false,
    pronouns: airtableRecord['Pronouns'] || '',
    pronounsOther: airtableRecord['Pronouns - Other'] || '',
    inactiveFlag: airtableRecord['Inactive Flag'] || false,
    
    // Demographics
    raceEthnicity: airtableRecord['Race & Ethnicity'] || [],
    raceEthnicityOther: airtableRecord['Race & Ethnicity - Other'] || '',
    gender: airtableRecord['Gender'] || '',
    genderOther: airtableRecord['Gender - Other'] || '',
    householdIncome: airtableRecord['Household Income'] || '',
    incomeBackground: airtableRecord['Income Background'] || '',
    lgbtqia: airtableRecord['LGBTQIA'] === 'TRUE',
    primaryLanguage: airtableRecord['Primary Language'] ? // primary language is a single select
      (Array.isArray(airtableRecord['Primary Language']) ? 
        airtableRecord['Primary Language'][0] : 
        airtableRecord['Primary Language']) : '',
    otherLanguages: airtableRecord['Other languages'] || [], // other language is an array
    
    // Contact Info
    primaryPhone: airtableRecord['Primary phone'] || '',
    secondaryPhone: airtableRecord['Secondary phone'] || null,
    homeAddress: airtableRecord['Home Address'] || ''
  };
};

// Transform Airtable charter record to match your React app format
export const transformCharterData = (airtableRecord) => {
  if (!airtableRecord) return null;

  return {
    id: airtableRecord.id,
    name: airtableRecord['Full name'] || airtableRecord['Charter key'] || '',
    shortName: airtableRecord['Short Name'] || '',
    status: airtableRecord['Status'] || '',
    initialTargetCommunity: airtableRecord['Initial target community'] || ''
  };
};

// Transform Airtable educator x school relationship
export const transformEducatorXSchoolData = (airtableRecord) => {
  if (!airtableRecord) return null;

  // Helper function to extract ID from array or string
  const extractId = (field) => {
    if (Array.isArray(field)) {
      return field.length > 0 ? field[0] : null;
    }
    return field || null;
  };

  // Helper function to extract name from array or string  
  const extractName = (field) => {
    if (Array.isArray(field)) {
      return field.length > 0 ? field[0] : 'Unknown';
    }
    return field || 'Unknown';
  };

  return {
    id: airtableRecord.id,
    educatorId: extractId(airtableRecord['Educator']),
    schoolId: extractId(airtableRecord['School']),
    startDate: airtableRecord['Start Date'] || '',
    endDate: airtableRecord['End Date'] || null,
    currentlyActive: airtableRecord['Currently Active'] === true || airtableRecord['Currently Active'] === 'true',
    roles: airtableRecord['Roles'] || [],
    educatorName: extractName(airtableRecord['Educator Full Name']),
    schoolName: extractName(airtableRecord['School Name']),
    createdTime: airtableRecord.createdTime
  };
};

// Transform other related data types
export const transformSchoolNoteData = (airtableRecord) => {
  if (!airtableRecord) return null;

  return {
    id: airtableRecord.id,
    schoolId: Array.isArray(airtableRecord['School']) ? 
      airtableRecord['School'][0] : 
      airtableRecord['School'],
    noteText: airtableRecord['Notes'] || '',
    createdBy: Array.isArray(airtableRecord['Created by']) ? 
      airtableRecord['Created by'][0] : 
      airtableRecord['Created by'] || '',
    createdDate: airtableRecord['Date created'] || '',
    isPrivate: airtableRecord['Private'] || false
  };
};

export const transformEducatorNoteData = (airtableRecord) => {
  if (!airtableRecord) return null;

  return {
    id: airtableRecord.id,
    educatorId: Array.isArray(airtableRecord['Educator']) ? 
      airtableRecord['Educator'][0] : 
      airtableRecord['Educator'],
    noteText: airtableRecord['Notes'] || '',
    createdBy: Array.isArray(airtableRecord['Created by']) ? 
      airtableRecord['Created by'][0] : 
      airtableRecord['Created by'] || '',
    createdDate: airtableRecord['Date'] || '',
    isPrivate: airtableRecord['Private'] || false
  };
};

export const transformGrantData = (airtableRecord) => {
  if (!airtableRecord) return null;

  return {
    id: airtableRecord.id,
    schoolId: Array.isArray(airtableRecord['School']) ? 
      airtableRecord['School'][0] : 
      airtableRecord['School'],
    amount: airtableRecord['Amount'] || 0,
    issueDate: airtableRecord['Issue Date'] || '',
    issuedBy: airtableRecord['Funding Source'] || '',
    partnerName: airtableRecord['Funding Source'] || '',
    status: airtableRecord['Grant Status'] || '',
    useOfFunds: airtableRecord['Notes'] || ''
  };
}; // Need other data here

export const transformLoanData = (airtableRecord) => {
  if (!airtableRecord) return null;

  return {
    id: airtableRecord.id,
    schoolId: Array.isArray(airtableRecord['School']) ? 
      airtableRecord['School'][0] : 
      airtableRecord['School'],
    amount: airtableRecord['Amount Issued'] || 0,
    issueDate: airtableRecord['Effective Issue Date'] || '',
    maturityDate: airtableRecord['Maturity'] || '',
    interestRate: airtableRecord['Interest Rate'] || 0,
    status: 'Active', // You may need to derive this from other fields
    useOfProceeds: airtableRecord['Use of Proceeds'] || ''
  };
};

export const transformActionStepData = (airtableRecord) => {
  if (!airtableRecord) return null;

  return {
    id: airtableRecord.id,
    schoolId: Array.isArray(airtableRecord['Schools']) ? 
      airtableRecord['Schools'][0] : 
      airtableRecord['Schools'],
    item: airtableRecord['Item'] || '',
    assignee: Array.isArray(airtableRecord['Assignee']) ? 
      airtableRecord['Assignee'][0] : 
      airtableRecord['Assignee'] || '',
    status: airtableRecord['Status'] || '',
    dueDate: airtableRecord['Due date'] || ''
  };
};

// UPDATED: Transform location data with more robust field handling
export const transformLocationData = (airtableRecord) => {
  if (!airtableRecord) return null;

  // Helper function to extract school ID
  const extractSchoolId = (field) => {
    if (Array.isArray(field)) {
      return field.length > 0 ? field[0] : null;
    }
    return field || null;
  };

  return {
    id: airtableRecord.id,
    schoolId: extractSchoolId(airtableRecord['School']),
    address: airtableRecord['Address'] || '',
    startDate: airtableRecord['Start of time at location'] || airtableRecord['Start Date'] || '',
    endDate: airtableRecord['End of time at location'] || airtableRecord['End Date'] || null,
    currentlyActive: airtableRecord['Currently Active'] === true || airtableRecord['Currently Active'] === 'true',
    locationType: airtableRecord['Location Type'] || '',
    currentMailingAddress: airtableRecord['Current Mailing Address'] === true || airtableRecord['Current Mailing Address'] === 'true',
    currentPhysicalAddress: airtableRecord['Current Physical Address'] === true || airtableRecord['Current Physical Address'] === 'true',
    
    // Additional location fields
    squareFeet: airtableRecord['Square feet'] || '',
    maxStudentsLicensedFor: airtableRecord['Max students licensed for'] || '',
    neighborhood: airtableRecord['Neighborhood'] || '',
    coLocationType: airtableRecord['Co-location type'] || '',
    coLocationPartner: airtableRecord['Co-location partner'] || '',
    leaseEndDate: airtableRecord['Lease end date'] || '',
    lease: airtableRecord['Lease'] || '',
    timeZone: airtableRecord['Time zone'] || '',
    
    createdTime: airtableRecord.createdTime
  };
};

export const transformLocationsData = (airtableRecords) => {
  if (!Array.isArray(airtableRecords)) {
    console.warn('transformLocationsData: Expected array, got:', typeof airtableRecords);
    return [];
  }
  return airtableRecords.map(transformLocationData).filter(Boolean);
};

// Batch transform functions
export const transformSchoolsData = (airtableRecords) => {
  if (!Array.isArray(airtableRecords)) {
    console.warn('transformSchoolsData: Expected array, got:', typeof airtableRecords);
    return [];
  }
  return airtableRecords.map(transformSchoolData).filter(Boolean);
};

export const transformEducatorsData = (airtableRecords) => {
  if (!Array.isArray(airtableRecords)) {
    console.warn('transformEducatorsData: Expected array, got:', typeof airtableRecords);
    return [];
  }
  return airtableRecords.map(transformEducatorData).filter(Boolean);
};

export const transformChartersData = (airtableRecords) => {
  if (!Array.isArray(airtableRecords)) {
    console.warn('transformChartersData: Expected array, got:', typeof airtableRecords);
    return [];
  }
  return airtableRecords.map(transformCharterData).filter(Boolean);
};

export const transformEducatorsXSchoolsData = (airtableRecords) => {
  if (!Array.isArray(airtableRecords)) {
    console.warn('transformEducatorsXSchoolsData: Expected array, got:', typeof airtableRecords);
    return [];
  }
  return airtableRecords.map(transformEducatorXSchoolData).filter(Boolean);
};

C:\USERS\MATTH\CODE_ROOT\WILDFLOWER-DATABASE\VITE.CONFIG.JS CODE IS BELOW
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
})

